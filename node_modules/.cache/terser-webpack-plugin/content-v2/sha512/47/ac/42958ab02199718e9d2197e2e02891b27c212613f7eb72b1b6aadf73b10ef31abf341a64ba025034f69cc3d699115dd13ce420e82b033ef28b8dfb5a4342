{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{\"Y/uQ\":function(t,e,r){\"use strict\";r.r(e),r.d(e,\"AddonModScormLazyModule\",(function(){return Y}));var o=r(\"tyNb\"),i=r(\"L3Fv\"),s=r(\"snYc\"),a=r(\"ghUQ\"),c=r(\"kGPB\"),n=r(\"fXoL\"),d=r(\"TEn/\"),l=r(\"4JiN\"),m=r(\"hMzs\"),h=r(\"nt/U\"),u=r(\"sYmb\");let f=(()=>{class AddonModScormIndexPage extends a.a{}return AddonModScormIndexPage.ɵfac=function AddonModScormIndexPage_Factory(t){return p(t||AddonModScormIndexPage)},AddonModScormIndexPage.ɵcmp=n.sc({type:AddonModScormIndexPage,selectors:[[\"page-addon-mod-scorm-index\"]],viewQuery:function AddonModScormIndexPage_Query(t,e){var r;(1&t&&n.ud(c.a,!0),2&t)&&(n.dd(r=n.Nc())&&(e.activityComponent=r.first))},features:[n.ic],decls:14,vars:12,consts:[[\"collapsible\",\"\"],[\"slot\",\"start\"],[3,\"text\"],[\"contextLevel\",\"module\",3,\"text\",\"contextInstanceId\",\"courseId\"],[\"slot\",\"end\"],[1,\"limited-width\"],[\"slot\",\"fixed\",3,\"disabled\",\"ionRefresh\"],[3,\"pullingText\"],[3,\"module\",\"courseId\",\"dataRetrieved\"]],template:function AddonModScormIndexPage_Template(t,e){1&t&&(n.Ec(0,\"ion-header\",0),n.Ec(1,\"ion-toolbar\"),n.Ec(2,\"ion-buttons\",1),n.zc(3,\"ion-back-button\",2),n.Pc(4,\"translate\"),n.Dc(),n.Ec(5,\"ion-title\"),n.Ec(6,\"h1\"),n.zc(7,\"core-format-text\",3),n.Dc(),n.Dc(),n.zc(8,\"ion-buttons\",4),n.Dc(),n.Dc(),n.Ec(9,\"ion-content\",5),n.Ec(10,\"ion-refresher\",6),n.Mc(\"ionRefresh\",(function AddonModScormIndexPage_Template_ion_refresher_ionRefresh_10_listener(t){return null==e.activityComponent?null:e.activityComponent.doRefresh(t.target)})),n.zc(11,\"ion-refresher-content\",7),n.Pc(12,\"translate\"),n.Dc(),n.Ec(13,\"addon-mod-scorm-index\",8),n.Mc(\"dataRetrieved\",(function AddonModScormIndexPage_Template_addon_mod_scorm_index_dataRetrieved_13_listener(t){return e.updateData(t)})),n.Dc(),n.Dc()),2&t&&(n.lc(3),n.Vc(\"text\",n.Qc(4,8,\"core.back\")),n.lc(4),n.Vc(\"text\",e.title)(\"contextInstanceId\",null==e.module?null:e.module.id)(\"courseId\",e.courseId),n.lc(3),n.Vc(\"disabled\",null==e.activityComponent?null:e.activityComponent.showLoading),n.lc(1),n.Wc(\"pullingText\",n.Qc(12,10,\"core.pulltorefresh\")),n.lc(2),n.Vc(\"module\",e.module)(\"courseId\",e.courseId))},directives:[d.C,l.b,d.Ab,d.m,d.h,d.i,d.yb,m.a,h.a,d.v,d.bb,d.cb,c.a],pipes:[u.d],encapsulation:2}),AddonModScormIndexPage})();const p=n.Gc(f);var _=r(\"mrSG\"),v=r(\"pHTc\"),g=r(\"9+EE\"),I=r(\"uT8i\"),w=r(\"3LXp\"),b=r(\"Q98t\"),E=r(\"bFG1\"),M=r(\"fjkH\"),S=r(\"bKlM\");const y=\"^[\\\\u0000-\\\\uFFFF]{0,255}$\",T=\"^[\\\\u0000-\\\\uFFFF]{0,4096}$\",A=\"^([0-2]{1}[0-9]{1}):([0-5]{1}[0-9]{1}):([0-5]{1}[0-9]{1})(.[0-9]{1,2})?$\",D=\"^([0-9]{2,4}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",P=\"^-?([0-9]+)$\",O=\"^-?([0-9]{0,3})(.[0-9]*)?$\",x=\"^[\\\\u0021-\\\\u007E]{0,255}$\",C=y,N=\"[._](\\\\d+).\",U=\"raw,min,max\",$=\"0#100\",k={0:\"No error\",101:\"General exception\",201:\"Invalid argument error\",202:\"Element cannot have children\",203:\"Element not an array - cannot have count\",301:\"Not initialized\",401:\"Not implemented error\",402:\"Invalid set value, element is a keyword\",403:\"Element is read only\",404:\"Element is write only\",405:\"Incorrect data type\"};class data_model_12_AddonModScormDataModel12{constructor(t,e,r,o,i,s=S.b.MODENORMAL,a=!1,c=!0){this.siteId=t,this.scorm=e,this.scoId=r,this.attempt=o,this.userData=i,this.mode=s,this.offline=a,this.canSaveTracks=c,this.currentUserData={},this.def={},this.defExtra={},this.dataModel={},this.initialized=!1,this.errorCode=\"0\",this.init(i)}addTime(t,e){const r=t.split(\":\"),o=e.split(\":\"),i=r[2].split(\".\"),s=o[2].split(\".\");let a=0,c=0;i.length>1&&(c=parseInt(i[1],10));let n=0;s.length>1&&(n=parseInt(s[1],10));let d=c+n;a=Math.floor(d/100),d-=100*a,Math.floor(d)<10&&(d=\"0\"+d.toString());let l=parseInt(i[0],10)+parseInt(s[0],10)+a;a=Math.floor(l/60),l-=60*a,Math.floor(l)<10&&(l=\"0\"+l.toString());let m=parseInt(r[1],10)+parseInt(o[1],10)+a;a=Math.floor(m/60),m-=60*a,m<10&&(m=\"0\"+m.toString());let h=parseInt(r[0],10)+parseInt(o[0],10)+a;return h<10&&(h=\"0\"+h.toString()),\"0\"!=d?h+\":\"+m+\":\"+l+\".\"+d:h+\":\"+m+\":\"+l}collectData(){if(!this.currentUserData[this.scoId])return[];const t=[];for(const e in this.currentUserData[this.scoId].userdata){if(\"cmi\"!=e.substring(0,3)||\"cmi.core.session_time\"==e)continue;const r=new RegExp(N,\"g\"),o=e.replace(r,\".n.\");if(void 0===this.dataModel[this.scoId][e]&&void 0!==this.dataModel[this.scoId][o]&&(this.dataModel[this.scoId][e]=E.a.clone(this.dataModel[this.scoId][o])),void 0===this.dataModel[this.scoId][e]||\"r\"==this.dataModel[this.scoId][e].mod)continue;const i={element:e.replace(r,\"_$1.\"),value:this.getEl(e)};void 0!==this.dataModel[this.scoId][e].defaultvalue?this.dataModel[this.scoId][e].defaultvalue!==i.value&&(t.push(i),this.dataModel[this.scoId][e].defaultvalue=i.value):(t.push(i),this.dataModel[this.scoId][e].defaultvalue=i.value)}return t}getEl(t){return this.currentUserData[this.scoId]&&void 0!==this.currentUserData[this.scoId].userdata[t]?this.currentUserData[this.scoId].userdata[t]:\"\"}init(t){var e,r,o,i,s,a,c;for(const e in t){const r=t[e];this.def[e]=r.defaultdata,this.defExtra[e]=r.userdata}for(const t in this.def){this.dataModel[t]={\"cmi._children\":{defaultvalue:\"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",mod:\"r\",writeerror:\"402\"},\"cmi._version\":{defaultvalue:\"3.4\",mod:\"r\",writeerror:\"402\"},\"cmi.core._children\":{defaultvalue:\"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",mod:\"r\",writeerror:\"402\"},\"cmi.core.student_id\":{defaultvalue:this.def[t][\"cmi.core.student_id\"],mod:\"r\",writeerror:\"403\"},\"cmi.core.student_name\":{defaultvalue:this.def[t][\"cmi.core.student_name\"],mod:\"r\",writeerror:\"403\"},\"cmi.core.lesson_location\":{defaultvalue:this.def[t][\"cmi.core.lesson_location\"],format:y,mod:\"rw\",writeerror:\"405\"},\"cmi.core.credit\":{defaultvalue:this.def[t][\"cmi.core.credit\"],mod:\"r\",writeerror:\"403\"},\"cmi.core.lesson_status\":{defaultvalue:this.def[t][\"cmi.core.lesson_status\"],format:\"^passed$|^completed$|^failed$|^incomplete$|^browsed$\",mod:\"rw\",writeerror:\"405\"},\"cmi.core.entry\":{defaultvalue:this.def[t][\"cmi.core.entry\"],mod:\"r\",writeerror:\"403\"},\"cmi.core.score._children\":{defaultvalue:U,mod:\"r\",writeerror:\"402\"},\"cmi.core.score.raw\":{defaultvalue:this.def[t][\"cmi.core.score.raw\"],format:O,range:$,mod:\"rw\",writeerror:\"405\"},\"cmi.core.score.max\":{defaultvalue:this.def[t][\"cmi.core.score.max\"],format:O,range:$,mod:\"rw\",writeerror:\"405\"},\"cmi.core.score.min\":{defaultvalue:this.def[t][\"cmi.core.score.min\"],format:O,range:$,mod:\"rw\",writeerror:\"405\"},\"cmi.core.total_time\":{defaultvalue:this.def[t][\"cmi.core.total_time\"],mod:\"r\",writeerror:\"403\"},\"cmi.core.lesson_mode\":{defaultvalue:this.def[t][\"cmi.core.lesson_mode\"],mod:\"r\",writeerror:\"403\"},\"cmi.core.exit\":{defaultvalue:this.def[t][\"cmi.core.exit\"],format:\"^time-out$|^suspend$|^logout$|^$\",mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"cmi.core.session_time\":{format:D,mod:\"w\",defaultvalue:\"00:00:00\",readerror:\"404\",writeerror:\"405\"},\"cmi.suspend_data\":{defaultvalue:this.def[t][\"cmi.suspend_data\"],format:T,mod:\"rw\",writeerror:\"405\"},\"cmi.launch_data\":{defaultvalue:this.def[t][\"cmi.launch_data\"],mod:\"r\",writeerror:\"403\"},\"cmi.comments\":{defaultvalue:this.def[t][\"cmi.comments\"],format:T,mod:\"rw\",writeerror:\"405\"},\"cmi.evaluation.comments._count\":{defaultvalue:\"0\",mod:\"r\",writeerror:\"402\"},\"cmi.evaluation.comments._children\":{defaultvalue:\"content,location,time\",mod:\"r\",writeerror:\"402\"},\"cmi.evaluation.comments.n.content\":{defaultvalue:\"\",pattern:N,format:y,mod:\"rw\",writeerror:\"405\"},\"cmi.evaluation.comments.n.location\":{defaultvalue:\"\",pattern:N,format:y,mod:\"rw\",writeerror:\"405\"},\"cmi.evaluation.comments.n.time\":{defaultvalue:\"\",pattern:N,format:A,mod:\"rw\",writeerror:\"405\"},\"cmi.comments_from_lms\":{mod:\"r\",writeerror:\"403\"},\"cmi.objectives._children\":{defaultvalue:\"id,score,status\",mod:\"r\",writeerror:\"402\"},\"cmi.objectives._count\":{mod:\"r\",defaultvalue:\"0\",writeerror:\"402\"},\"cmi.objectives.n.id\":{pattern:N,format:x,mod:\"rw\",writeerror:\"405\"},\"cmi.objectives.n.score._children\":{pattern:N,mod:\"r\",writeerror:\"402\"},\"cmi.objectives.n.score.raw\":{defaultvalue:\"\",pattern:N,format:O,range:$,mod:\"rw\",writeerror:\"405\"},\"cmi.objectives.n.score.min\":{defaultvalue:\"\",pattern:N,format:O,range:$,mod:\"rw\",writeerror:\"405\"},\"cmi.objectives.n.score.max\":{defaultvalue:\"\",pattern:N,format:O,range:$,mod:\"rw\",writeerror:\"405\"},\"cmi.objectives.n.status\":{pattern:N,format:\"^passed$|^completed$|^failed$|^incomplete$|^browsed$|^not attempted$\",mod:\"rw\",writeerror:\"405\"},\"cmi.student_data._children\":{defaultvalue:\"mastery_score,max_time_allowed,time_limit_action\",mod:\"r\",writeerror:\"402\"},\"cmi.student_data.mastery_score\":{defaultvalue:this.def[t][\"cmi.student_data.mastery_score\"],mod:\"r\",writeerror:\"403\"},\"cmi.student_data.max_time_allowed\":{defaultvalue:this.def[t][\"cmi.student_data.max_time_allowed\"],mod:\"r\",writeerror:\"403\"},\"cmi.student_data.time_limit_action\":{defaultvalue:this.def[t][\"cmi.student_data.time_limit_action\"],mod:\"r\",writeerror:\"403\"},\"cmi.student_preference._children\":{defaultvalue:\"audio,language,speed,text\",mod:\"r\",writeerror:\"402\"},\"cmi.student_preference.audio\":{defaultvalue:this.def[t][\"cmi.student_preference.audio\"],format:P,range:\"-1#100\",mod:\"rw\",writeerror:\"405\"},\"cmi.student_preference.language\":{defaultvalue:this.def[t][\"cmi.student_preference.language\"],format:y,mod:\"rw\",writeerror:\"405\"},\"cmi.student_preference.speed\":{defaultvalue:this.def[t][\"cmi.student_preference.speed\"],format:P,range:\"-100#100\",mod:\"rw\",writeerror:\"405\"},\"cmi.student_preference.text\":{defaultvalue:this.def[t][\"cmi.student_preference.text\"],format:P,range:\"-1#1\",mod:\"rw\",writeerror:\"405\"},\"cmi.interactions._children\":{defaultvalue:\"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",mod:\"r\",writeerror:\"402\"},\"cmi.interactions._count\":{mod:\"r\",defaultvalue:\"0\",writeerror:\"402\"},\"cmi.interactions.n.id\":{pattern:N,format:x,mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"cmi.interactions.n.objectives._count\":{pattern:N,mod:\"r\",defaultvalue:\"0\",writeerror:\"402\"},\"cmi.interactions.n.objectives.n.id\":{pattern:N,format:x,mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"cmi.interactions.n.time\":{pattern:N,format:A,mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"cmi.interactions.n.type\":{pattern:N,format:\"^true-false$|^choice$|^fill-in$|^matching$|^performance$|^sequencing$|^likert$|^numeric$\",mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"cmi.interactions.n.correct_responses._count\":{pattern:N,mod:\"r\",defaultvalue:\"0\",writeerror:\"402\"},\"cmi.interactions.n.correct_responses.n.pattern\":{pattern:N,format:C,mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"cmi.interactions.n.weighting\":{pattern:N,format:O,range:\"-100#100\",mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"cmi.interactions.n.student_response\":{pattern:N,format:C,mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"cmi.interactions.n.result\":{pattern:N,format:\"^correct$|^wrong$|^unanticipated$|^neutral$|^([0-9]{0,3})?(.[0-9]*)?$\",mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"cmi.interactions.n.latency\":{pattern:N,format:D,mod:\"w\",readerror:\"404\",writeerror:\"405\"},\"nav.event\":{defaultvalue:\"\",format:\"^previous$|^continue$\",mod:\"w\",readerror:\"404\",writeerror:\"405\"}},this.currentUserData[t]={scoid:Number(t),userdata:{},defaultdata:{}};for(const e in this.dataModel[t])if(null===e.match(/\\.n\\./)){const r=this.dataModel[t][e].defaultvalue;void 0!==r&&(this.currentUserData[t].userdata[e]=r)}for(const e in this.def[t])if(null===e.match(/\\.n\\./)){const r=this.dataModel[t][e].defaultvalue;this.currentUserData[t].userdata[e]=void 0!==r?r:void 0!==this.defExtra[t][e]?this.defExtra[t][e]:\"\"}const n=new RegExp(N,\"g\");for(const d in this.defExtra[t]){let l=\"\",m=\"0\";if(d.match(n)){const h=d.replace(n,\".$1.\");if(this.currentUserData[t].userdata[h]=this.defExtra[t][d],0===h.indexOf(\"cmi.evaluation.comments\"))l=\"cmi.evaluation.comments._count\",m=(null===(e=h.match(/.(\\d+)./))||void 0===e?void 0:e[1])||\"0\";else if(0===h.indexOf(\"cmi.objectives\"))l=\"cmi.objectives._count\",m=(null===(r=h.match(/.(\\d+)./))||void 0===r?void 0:r[1])||\"0\";else if(0===h.indexOf(\"cmi.interactions\"))if(h.indexOf(\".objectives.\")>0){const t=null===(o=h.match(/cmi.interactions.(\\d+)./))||void 0===o?void 0:o[1];m=(null===(i=h.match(/objectives.(\\d+)./))||void 0===i?void 0:i[1])||\"0\",l=\"cmi.interactions.\"+t+\".objectives._count\"}else if(h.indexOf(\".correct_responses.\")>0){const t=null===(s=h.match(/cmi.interactions.(\\d+)./))||void 0===s?void 0:s[1];m=(null===(a=h.match(/correct_responses.(\\d+)./))||void 0===a?void 0:a[1])||\"0\",l=\"cmi.interactions.\"+t+\".correct_responses._count\"}else l=\"cmi.interactions._count\",m=(null===(c=h.match(/.(\\d+)./))||void 0===c?void 0:c[1])||\"0\";if(l){const e=this.currentUserData[t].userdata[l];void 0===e&&(this.currentUserData[t].userdata[l]=0),Number(m)==Number(e)&&(this.currentUserData[t].userdata[l]=Number(e)+1),Number(m)>Number(e)&&(this.currentUserData[t].userdata[l]=Number(m)-1)}}}\"\"===this.currentUserData[t].userdata[\"cmi.core.lesson_status\"]&&(this.currentUserData[t].userdata[\"cmi.core.lesson_status\"]=\"not attempted\"),this.currentUserData[t].userdata[\"cmi.core.credit\"]=this.mode==S.b.MODENORMAL?\"credit\":\"no-credit\",this.currentUserData[t].userdata[\"cmi.core.lesson_mode\"]=this.mode}}LMSCommit(t){if(this.timeout&&(clearTimeout(this.timeout),this.timeout=void 0),this.errorCode=\"0\",\"\"==t){if(this.initialized){const t=this.storeData(!1);return this.triggerEvent(S.b.UPDATE_TOC_EVENT),this.errorCode=t?\"0\":\"101\",t?\"true\":\"false\"}this.errorCode=\"301\"}else this.errorCode=\"201\";return\"false\"}LMSFinish(t){if(this.errorCode=\"0\",\"\"==t){if(this.initialized){this.initialized=!1;const t=this.storeData(!0);return\"\"!=this.getEl(\"nav.event\")?\"continue\"==this.getEl(\"nav.event\")?this.triggerEvent(S.b.LAUNCH_NEXT_SCO_EVENT):this.triggerEvent(S.b.LAUNCH_PREV_SCO_EVENT):this.scorm.auto&&this.triggerEvent(S.b.LAUNCH_NEXT_SCO_EVENT),this.errorCode=t?\"0\":\"101\",this.triggerEvent(S.b.UPDATE_TOC_EVENT),t?\"true\":\"false\"}this.errorCode=\"301\"}else this.errorCode=\"201\";return\"false\"}LMSGetDiagnostic(t){return\"\"==t&&(t=this.errorCode),t}LMSGetErrorString(t){return\"\"!=t?k[t]:\"\"}LMSGetLastError(){return this.errorCode}LMSGetValue(t){if(this.errorCode=\"0\",this.initialized)if(\"\"!=t){const e=new RegExp(N,\"g\"),r=String(t).replace(e,\".n.\");if(void 0!==this.dataModel[this.scoId][r]){if(\"w\"!=this.dataModel[this.scoId][r].mod)return this.errorCode=\"0\",this.getEl(t);this.errorCode=this.dataModel[this.scoId][r].readerror||\"0\"}else{const t=\"._children\",e=\"._count\";if(r.substring(r.length-t.length)==t){const e=r.substring(0,r.length-t.length);this.errorCode=void 0!==this.dataModel[this.scoId][e]?\"202\":\"201\"}else if(r.substring(r.length-e.length)==e){const t=r.substring(0,r.length-e.length);this.errorCode=void 0!==this.dataModel[this.scoId][t]?\"203\":\"201\"}else this.errorCode=\"201\"}}else this.errorCode=\"201\";else this.errorCode=\"301\";return\"\"}LMSInitialize(t){if(this.errorCode=\"0\",\"\"==t){if(!this.initialized)return this.initialized=!0,this.errorCode=\"0\",\"true\";this.errorCode=\"101\"}else this.errorCode=\"201\";return\"false\"}LMSSetValue(t,e){var r,o,i;if(this.errorCode=\"0\",this.initialized)if(\"\"!=t){let s=new RegExp(N,\"g\");const a=String(t).replace(s,\".n.\");if(void 0!==this.dataModel[this.scoId][a])if(\"r\"!=this.dataModel[this.scoId][a].mod){s=new RegExp(null!==(r=this.dataModel[this.scoId][a].format)&&void 0!==r?r:\"\");if(null!=(e+=\"\").match(s)){if(t!=a){if(0===t.indexOf(\"cmi.objectives\")){const e=\"cmi.objectives.\"+(null===(o=t.match(/cmi.objectives.(\\d+)./))||void 0===o?void 0:o[1])+\".score\";void 0===this.currentUserData[this.scoId].userdata[e+\"._children\"]&&(this.setEl(this.currentUserData[this.scoId].userdata[e+\"._children\"],U),this.setEl(this.currentUserData[this.scoId].userdata[e+\".raw\"],\"\"),this.setEl(this.currentUserData[this.scoId].userdata[e+\".min\"],\"\"),this.setEl(this.currentUserData[this.scoId].userdata[e+\".max\"],\"\"))}else if(0===t.indexOf(\"cmi.interactions\")){const e=null===(i=t.match(/cmi.interactions.(\\d+)./))||void 0===i?void 0:i[1];let r=\"cmi.interactions.\"+e+\".objectives._count\";void 0===this.currentUserData[this.scoId].userdata[r]&&this.setEl(r,0),r=\"cmi.interactions.\"+e+\".correct_responses._count\",void 0===this.currentUserData[this.scoId].userdata[r]&&this.setEl(r,0)}const e=t.split(\".\");let r=\"cmi\";for(let t=1;t<e.length-1;t++){const o=e[t];if(e[t+1].match(/^\\d+$/)){const i=r+\".\"+o+\"._count\";if(void 0===this.currentUserData[this.scoId].userdata[i]&&this.setEl(i,0),e[t+1]==this.getEl(i)){const t=this.getEl(i);this.setEl(i,Number(t)+1)}e[t+1]>this.getEl(i)&&(this.errorCode=\"201\"),r=r.concat(\".\"+o+\".\"+e[t+1]),t++}else r=r.concat(\".\"+o)}t=r.concat(\".\"+e[e.length-1])}if(\"0\"==this.errorCode){this.scorm.autocommit&&!this.timeout&&(this.timeout=window.setTimeout(this.LMSCommit.bind(this),6e4,[\"\"]));const r=this.dataModel[this.scoId][a].range;if(void 0===r)return\"cmi.comments\"==t?this.setEl(\"cmi.comments\",this.getEl(\"cmi.comments\")+e):this.setEl(t,e),this.errorCode=\"0\",\"true\";{const o=r.split(\"#\");if((e=Number(e))>=Number(o[0])&&e<=Number(o[1]))return this.setEl(t,Number(e)),this.errorCode=\"0\",\"true\";this.errorCode=this.dataModel[this.scoId][a].writeerror}}}else this.errorCode=this.dataModel[this.scoId][a].writeerror}else this.errorCode=this.dataModel[this.scoId][a].writeerror;else this.errorCode=\"201\"}else this.errorCode=\"201\";else this.errorCode=\"301\";return\"false\"}loadSco(t){this.scoId=t}setEl(t,e){this.currentUserData[this.scoId]=this.currentUserData[this.scoId]||{scoid:this.scoId,userdata:{},defaultdata:{}},this.currentUserData[this.scoId].userdata[t]=e}setOffline(t){this.offline=t}storeData(t){if(!this.canSaveTracks)return!0;let e;t?(\"not attempted\"==this.getEl(\"cmi.core.lesson_status\")&&this.setEl(\"cmi.core.lesson_status\",\"completed\"),this.getEl(\"cmi.core.lesson_mode\")==S.b.MODENORMAL&&\"credit\"==this.getEl(\"cmi.core.credit\")&&\"\"!==this.getEl(\"cmi.student_data.mastery_score\")&&\"\"!==this.getEl(\"cmi.core.score.raw\")&&(parseFloat(this.getEl(\"cmi.core.score.raw\"))>=parseFloat(this.getEl(\"cmi.student_data.mastery_score\"))?this.setEl(\"cmi.core.lesson_status\",\"passed\"):this.setEl(\"cmi.core.lesson_status\",\"failed\")),this.getEl(\"cmi.core.lesson_mode\")==S.b.MODEBROWSE&&\"\"==this.dataModel[this.scoId][\"cmi.core.lesson_status\"].defaultvalue&&\"not attempted\"==this.getEl(\"cmi.core.lesson_status\")&&this.setEl(\"cmi.core.lesson_status\",\"browsed\"),e=this.collectData(),e.push(this.totalTime())):e=this.collectData();const r=S.a.saveTracksSync(this.scoId,this.attempt,e,this.scorm,this.offline,this.currentUserData);return this.offline||r?r:(this.offline=!0,this.triggerEvent(S.b.GO_OFFLINE_EVENT),S.a.saveTracksSync(this.scoId,this.attempt,e,this.scorm,this.offline,this.currentUserData))}totalTime(){return{element:\"cmi.core.total_time\",value:this.addTime(this.getEl(\"cmi.core.total_time\"),this.getEl(\"cmi.core.session_time\"))}}triggerEvent(t){M.b.trigger(t,{scormId:this.scorm.id,scoId:this.scoId,attempt:this.attempt},this.siteId)}}var j=r(\"8ykv\"),z=r(\"pisK\"),L=r(\"G82x\"),F=r(\"tVmb\"),R=r(\"ofXK\"),V=r(\"PgjG\"),G=r(\"3zv0\"),H=r(\"ACYt\"),Q=r(\"3CSS\"),q=r(\"qNqN\"),W=r(\"/BoF\"),B=r(\"3jOR\");function AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template(t,e){if(1&t){const t=n.Fc();n.Ec(0,\"ion-button\",11),n.Mc(\"click\",(function AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template_ion_button_click_0_listener(){n.fd(t);return n.Oc(2).openToc()})),n.Pc(1,\"translate\"),n.zc(2,\"ion-icon\",12),n.Dc()}2&t&&n.mc(\"aria-label\",n.Qc(1,1,\"addon.mod_scorm.toc\"))}function AddonModScormPlayerPage_core_button_with_spinner_9_Template(t,e){if(1&t&&(n.Ec(0,\"core-button-with-spinner\",9),n.nd(1,AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template,3,3,\"ion-button\",10),n.Dc()),2&t){const t=n.Oc();n.Vc(\"loading\",t.loadingToc),n.lc(1),n.Vc(\"ngIf\",t.toc.length)}}function AddonModScormPlayerPage_core_iframe_12_Template(t,e){if(1&t&&n.zc(0,\"core-iframe\",13),2&t){const t=n.Oc();n.Vc(\"src\",t.src)(\"iframeWidth\",t.scormWidth)(\"iframeHeight\",t.scormHeight)(\"showFullscreenOnToolbar\",!0)(\"autoFullscreenOnRotate\",!0)}}function AddonModScormPlayerPage_p_13_Template(t,e){if(1&t&&(n.Ec(0,\"p\"),n.pd(1),n.Pc(2,\"translate\"),n.Dc()),2&t){const t=n.Oc();n.lc(1),n.qd(n.Qc(2,1,t.errorMessage))}}function AddonModScormPlayerPage_core_navigation_bar_14_Template(t,e){if(1&t){const t=n.Fc();n.Ec(0,\"core-navigation-bar\",14),n.Mc(\"action\",(function AddonModScormPlayerPage_core_navigation_bar_14_Template_core_navigation_bar_action_0_listener(e){n.fd(t);return n.Oc().loadSco(e)})),n.Dc()}if(2&t){const t=n.Oc();n.Vc(\"items\",t.navigationItems)}}let X=(()=>{class AddonModScormPlayerPage{constructor(t){this.mainMenuPage=t,this.showToc=!1,this.loadingToc=!0,this.toc=[],this.loaded=!1,this.incomplete=!1,this.navigationItems=[],this.newAttempt=!1,this.attempt=0,this.offline=!1}ngOnInit(){return Object(_.a)(this,void 0,void 0,(function*(){try{this.cmId=v.a.getRequiredRouteNumberParam(\"cmId\"),this.courseId=v.a.getRequiredRouteNumberParam(\"courseId\"),this.mode=v.a.getRouteParam(\"mode\")||S.b.MODENORMAL,this.moduleUrl=v.a.getRouteParam(\"moduleUrl\")||\"\",this.newAttempt=!!v.a.getRouteBooleanParam(\"newAttempt\"),this.organizationId=v.a.getRouteParam(\"organizationId\"),this.initialScoId=v.a.getRouteNumberParam(\"scoId\"),this.siteId=g.b.getRequiredCurrentSite().getId()}catch(t){return w.a.showErrorModal(t),v.a.back(),void 0}try{if(yield this.fetchData(),!this.currentSco)return v.a.back(),void 0;if(this.newAttempt)try{yield this.setStartTime(this.currentSco.id)}catch(t){w.a.showErrorModalDefault(t,\"addon.mod_scorm.errorgetscorm\",!0)}this.loadSco(this.currentSco)}finally{this.loaded=!0}}))}get canSaveTracks(){return!this.accessInfo||!!this.accessInfo.cansavetrack}initialize(){return Object(_.a)(this,void 0,void 0,(function*(){this.scorm=yield S.a.getScorm(this.courseId,this.cmId,{moduleUrl:this.moduleUrl,readingStrategy:1}),I.a.blockOperation(S.b.COMPONENT,this.scorm.id,\"player\"),this.title=this.scorm.name,this.showToc=S.a.displayTocInPlayer(this.scorm),this.scorm.popup&&this.scorm.width&&this.scorm.width>100&&(this.scormWidth=this.scorm.width,this.scorm.height&&this.scorm.height>100&&(this.scormHeight=this.scorm.height)),this.tocObserver=M.b.on(S.b.UPDATE_TOC_EVENT,(t=>{t.scormId===this.scorm.id&&(this.offline?setTimeout(this.refreshToc.bind(this),100):this.refreshToc())}),this.siteId),this.launchNextObserver=M.b.on(S.b.LAUNCH_NEXT_SCO_EVENT,(t=>{if(t.scormId===this.scorm.id&&this.currentSco){const t=z.a.getNextScoFromToc(this.toc,this.currentSco.id);t&&this.loadSco(t)}}),this.siteId),this.launchPrevObserver=M.b.on(S.b.LAUNCH_PREV_SCO_EVENT,(t=>{if(t.scormId===this.scorm.id&&this.currentSco){const t=z.a.getPreviousScoFromToc(this.toc,this.currentSco.id);t&&this.loadSco(t)}}),this.siteId),this.goOfflineObserver=M.b.on(S.b.GO_OFFLINE_EVENT,(t=>{t.scormId!==this.scorm.id||this.offline||(this.offline=!0,setTimeout((()=>Object(_.a)(this,void 0,void 0,(function*(){try{z.a.convertAttemptToOffline(this.scorm,this.attempt)}catch(t){w.a.showErrorModalDefault(t,\"core.error\",!0)}this.refreshToc()}))),200))}),this.siteId)}))}calculateNavigationItems(t){this.navigationItems=this.toc.filter((t=>t.isvisible)).map((e=>({item:e,title:e.title,current:e.id==t,enabled:!(!e.prereq||!e.launch)})))}determineAttemptAndMode(t,e){return Object(_.a)(this,void 0,void 0,(function*(){const r=yield z.a.determineAttemptToContinue(this.scorm,t);let o=!1;this.attempt=r.num,this.offline=r.offline,this.attempt!=t.lastAttempt.num&&(this.attemptToContinue=this.attempt),this.attempt>0&&(o=yield S.a.isAttemptIncomplete(this.scorm.id,this.attempt,{offline:this.offline,cmId:this.cmId}));const i=S.a.determineAttemptAndMode(this.scorm,this.mode,this.attempt,this.newAttempt,o,e.cansavetrack);if(i.attempt>this.attempt)if(this.offline)yield z.a.createOfflineAttempt(this.scorm,i.attempt,t.online.length);else try{yield S.a.getScormUserData(this.scorm.id,i.attempt,{cmId:this.cmId,readingStrategy:2})}catch(e){this.offline=!0,yield z.a.createOfflineAttempt(this.scorm,i.attempt,t.online.length)}this.mode=i.mode,this.newAttempt=i.newAttempt,this.attempt=i.attempt}))}fetchData(){return Object(_.a)(this,void 0,void 0,(function*(){this.scorm||(yield this.initialize()),yield L.a.waitForSync(this.scorm.id);try{const[t,e]=yield Promise.all([S.a.getAttemptCount(this.scorm.id,{cmId:this.cmId}),S.a.getAccessInformation(this.scorm.id,{cmId:this.cmId})]);this.accessInfo=e,yield this.determineAttemptAndMode(t,e);const[r]=yield Promise.all([S.a.getScormUserData(this.scorm.id,this.attempt,{cmId:this.cmId,offline:this.offline}),this.fetchToc()]);this.userData=r}catch(t){w.a.showErrorModalDefault(t,\"addon.mod_scorm.errorgetscorm\",!0)}}))}fetchToc(){return Object(_.a)(this,void 0,void 0,(function*(){this.loadingToc=!0;try{if(this.incomplete=yield S.a.isAttemptIncomplete(this.scorm.id,this.attempt,{offline:this.offline,cmId:this.cmId}),this.toc=yield z.a.getToc(this.scorm.id,this.attempt,this.incomplete,{organization:this.organizationId,offline:this.offline,cmId:this.cmId}),this.currentSco)return;if(this.newAttempt&&(this.initialScoId=this.scorm.launch),this.initialScoId&&this.initialScoId>0&&(this.currentSco=z.a.getScoFromToc(this.toc,this.initialScoId)),this.currentSco)return;const t=yield z.a.getFirstSco(this.scorm.id,this.attempt,{toc:this.toc,organization:this.organizationId,mode:this.mode,offline:this.offline,cmId:this.cmId});t?this.currentSco=t:this.errorMessage=\"addon.mod_scorm.errornovalidsco\"}finally{this.loadingToc=!1}}))}loadSco(t){var e;return Object(_.a)(this,void 0,void 0,(function*(){this.dataModel?this.dataModel.loadSco(t.id):(this.dataModel=new data_model_12_AddonModScormDataModel12(this.siteId,this.scorm,t.id,this.attempt,null!==(e=this.userData)&&void 0!==e?e:{},this.mode,this.offline,this.canSaveTracks),window.API=this.dataModel),this.currentSco=t,this.title=t.title||this.scorm.name,this.calculateNavigationItems(t.id),this.loadScoSrc(t),\"asset\"==t.scormtype&&this.markCompleted(t),E.a.ignoreErrors(S.a.logLaunchSco(this.scorm.id,t.id,this.scorm.name))}))}loadScoSrc(t){return Object(_.a)(this,void 0,void 0,(function*(){const e=yield S.a.getScoSrc(this.scorm,t);e==this.src&&(this.src=\"\",yield E.a.nextTick()),this.src=e}))}markCompleted(t){var e;return Object(_.a)(this,void 0,void 0,(function*(){if(!this.canSaveTracks)return;const r=[{element:\"cmi.core.lesson_status\",value:\"completed\"}];try{S.a.saveTracks(t.id,this.attempt,r,this.scorm,this.offline)}catch(o){if(this.offline)return;const i=yield S.a.getScormUserData(this.scorm.id,this.attempt,{cmId:this.cmId});if(i[t.id]&&\"completed\"==i[t.id].userdata[\"cmi.core.lesson_status\"])return;try{yield z.a.convertAttemptToOffline(this.scorm,this.attempt),this.offline=!0,null===(e=this.dataModel)||void 0===e||e.setOffline(!0),yield S.a.saveTracks(t.id,this.attempt,r,this.scorm,!0)}catch(t){w.a.showErrorModalDefault(t,\"core.error\",!0)}}finally{this.refreshToc()}}))}openToc(){return Object(_.a)(this,void 0,void 0,(function*(){const t=yield w.a.openSideModal({component:j.a,componentProps:{toc:this.toc,attemptToContinue:this.attemptToContinue,selected:this.currentSco&&this.currentSco.id,moduleId:this.cmId,courseId:this.courseId,accessInfo:this.accessInfo,mode:this.mode}});t&&this.loadSco(t)}))}refreshToc(){return Object(_.a)(this,void 0,void 0,(function*(){try{yield E.a.ignoreErrors(S.a.invalidateAllScormData(this.scorm.id)),yield this.fetchToc()}catch(t){w.a.showErrorModalDefault(t,\"addon.mod_scorm.errorgetscorm\",!0)}}))}setStartTime(t){return Object(_.a)(this,void 0,void 0,(function*(){if(!this.canSaveTracks)return;const e=[{element:\"x.start.time\",value:String(b.a.timestamp())}];yield S.a.saveTracks(t,this.attempt,e,this.scorm,this.offline),this.offline||(yield E.a.ignoreErrors(S.a.getAttemptCount(this.scorm.id,{cmId:this.cmId,readingStrategy:2})))}))}ngOnDestroy(){var t,e,r;this.src=\"\",M.b.trigger(M.b.ACTIVITY_DATA_SENT,{module:\"scorm\"}),null===(t=this.tocObserver)||void 0===t||t.off(),null===(e=this.launchNextObserver)||void 0===e||e.off(),null===(r=this.launchPrevObserver)||void 0===r||r.off(),setTimeout((()=>{var t;null===(t=this.goOfflineObserver)||void 0===t?void 0:t.off()}),500),I.a.unblockOperation(S.b.COMPONENT,this.scorm.id,\"player\")}}return AddonModScormPlayerPage.ɵfac=function AddonModScormPlayerPage_Factory(t){return new(t||AddonModScormPlayerPage)(n.yc(F.a))},AddonModScormPlayerPage.ɵcmp=n.sc({type:AddonModScormPlayerPage,selectors:[[\"page-addon-mod-scorm-player\"]],decls:15,vars:11,consts:[[\"slot\",\"start\"],[3,\"text\"],[\"contextLevel\",\"module\",3,\"text\",\"contextInstanceId\",\"courseId\"],[\"slot\",\"end\"],[3,\"loading\",4,\"ngIf\"],[3,\"hideUntil\"],[3,\"src\",\"iframeWidth\",\"iframeHeight\",\"showFullscreenOnToolbar\",\"autoFullscreenOnRotate\",4,\"ngIf\"],[4,\"ngIf\"],[\"collapsible-footer\",\"\",\"appearOnBottom\",\"\",\"slot\",\"fixed\",3,\"items\",\"action\",4,\"ngIf\"],[3,\"loading\"],[\"fill\",\"clear\",\"aria-haspopup\",\"true\",3,\"click\",4,\"ngIf\"],[\"fill\",\"clear\",\"aria-haspopup\",\"true\",3,\"click\"],[\"name\",\"fas-bookmark\",\"slot\",\"icon-only\",\"aria-hidden\",\"true\"],[3,\"src\",\"iframeWidth\",\"iframeHeight\",\"showFullscreenOnToolbar\",\"autoFullscreenOnRotate\"],[\"collapsible-footer\",\"\",\"appearOnBottom\",\"\",\"slot\",\"fixed\",3,\"items\",\"action\"]],template:function AddonModScormPlayerPage_Template(t,e){1&t&&(n.Ec(0,\"ion-header\"),n.Ec(1,\"ion-toolbar\"),n.Ec(2,\"ion-buttons\",0),n.zc(3,\"ion-back-button\",1),n.Pc(4,\"translate\"),n.Dc(),n.Ec(5,\"ion-title\"),n.Ec(6,\"h1\"),n.zc(7,\"core-format-text\",2),n.Dc(),n.Dc(),n.Ec(8,\"ion-buttons\",3),n.nd(9,AddonModScormPlayerPage_core_button_with_spinner_9_Template,2,2,\"core-button-with-spinner\",4),n.Dc(),n.Dc(),n.Dc(),n.Ec(10,\"ion-content\"),n.Ec(11,\"core-loading\",5),n.nd(12,AddonModScormPlayerPage_core_iframe_12_Template,1,5,\"core-iframe\",6),n.nd(13,AddonModScormPlayerPage_p_13_Template,3,3,\"p\",7),n.Dc(),n.nd(14,AddonModScormPlayerPage_core_navigation_bar_14_Template,1,1,\"core-navigation-bar\",8),n.Dc()),2&t&&(n.lc(3),n.Vc(\"text\",n.Qc(4,9,\"core.back\")),n.lc(4),n.Vc(\"text\",e.title)(\"contextInstanceId\",e.cmId)(\"courseId\",e.courseId),n.lc(2),n.Vc(\"ngIf\",e.showToc),n.lc(2),n.Vc(\"hideUntil\",e.loaded),n.lc(1),n.Vc(\"ngIf\",e.loaded&&e.src),n.lc(1),n.Vc(\"ngIf\",!e.src&&e.errorMessage),n.lc(1),n.Vc(\"ngIf\",e.loaded&&e.navigationItems.length>1))},directives:[d.C,d.Ab,d.m,d.h,d.i,d.yb,m.a,R.t,h.a,d.v,V.a,G.a,H.a,d.l,d.D,Q.a,q.a,W.a,B.a],pipes:[u.d],encapsulation:2}),AddonModScormPlayerPage})();const J=[{path:\":courseId/:cmId\",component:f},{path:\":courseId/:cmId/player\",component:X}];let Y=(()=>{class AddonModScormLazyModule{}return AddonModScormLazyModule.ɵmod=n.wc({type:AddonModScormLazyModule}),AddonModScormLazyModule.ɵinj=n.vc({factory:function AddonModScormLazyModule_Factory(t){return new(t||AddonModScormLazyModule)},imports:[[o.m.forChild(J),i.a,s.a]]}),AddonModScormLazyModule})();void((\"undefined\"==typeof ngJitMode||ngJitMode)&&n.kd(Y,{declarations:[f,X],imports:[o.m,i.a,s.a]}))}}]);","name":"78.1d012bd27c8bf79de046.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[78],{\n\n/***/ \"Y/uQ\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"AddonModScormLazyModule\", function() { return /* binding */ scorm_lazy_module_AddonModScormLazyModule; });\n\n// EXTERNAL MODULE: ./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js + 10 modules\nvar router = __webpack_require__(\"tyNb\");\n\n// EXTERNAL MODULE: ./src/core/shared.module.ts + 3 modules\nvar shared_module = __webpack_require__(\"L3Fv\");\n\n// EXTERNAL MODULE: ./src/addons/mod/scorm/components/components.module.ts\nvar components_module = __webpack_require__(\"snYc\");\n\n// EXTERNAL MODULE: ./src/core/features/course/classes/main-activity-page.ts\nvar main_activity_page = __webpack_require__(\"ghUQ\");\n\n// EXTERNAL MODULE: ./src/addons/mod/scorm/components/index/index.ts\nvar index = __webpack_require__(\"kGPB\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js\nvar core = __webpack_require__(\"fXoL\");\n\n// EXTERNAL MODULE: ./node_modules/@ionic/angular/__ivy_ngcc__/fesm2015/ionic-angular.js + 5 modules\nvar ionic_angular = __webpack_require__(\"TEn/\");\n\n// EXTERNAL MODULE: ./src/core/directives/collapsible-header.ts\nvar collapsible_header = __webpack_require__(\"4JiN\");\n\n// EXTERNAL MODULE: ./src/core/directives/format-text.ts\nvar format_text = __webpack_require__(\"hMzs\");\n\n// EXTERNAL MODULE: ./src/core/directives/content.ts\nvar content = __webpack_require__(\"nt/U\");\n\n// EXTERNAL MODULE: ./node_modules/@ngx-translate/core/__ivy_ngcc__/fesm2015/ngx-translate-core.js + 8 modules\nvar ngx_translate_core = __webpack_require__(\"sYmb\");\n\n// CONCATENATED MODULE: ./src/addons/mod/scorm/pages/index/index.ts\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n\n\n\n\n/**\n * Page that displays the scorm entry page.\n */\nlet index_AddonModScormIndexPage = /*@__PURE__*/ (() => {\n    class AddonModScormIndexPage extends main_activity_page[\"a\" /* CoreCourseModuleMainActivityPage */] {\n    }\n    AddonModScormIndexPage.ɵfac = function AddonModScormIndexPage_Factory(t) { return ɵAddonModScormIndexPage_BaseFactory(t || AddonModScormIndexPage); };\n    AddonModScormIndexPage.ɵcmp = core[\"sc\" /* ɵɵdefineComponent */]({ type: AddonModScormIndexPage, selectors: [[\"page-addon-mod-scorm-index\"]], viewQuery: function AddonModScormIndexPage_Query(rf, ctx) {\n            if (rf & 1) {\n                core[\"ud\" /* ɵɵviewQuery */](index[\"a\" /* AddonModScormIndexComponent */], true);\n            }\n            if (rf & 2) {\n                var _t;\n                core[\"dd\" /* ɵɵqueryRefresh */](_t = core[\"Nc\" /* ɵɵloadQuery */]()) && (ctx.activityComponent = _t.first);\n            }\n        }, features: [core[\"ic\" /* ɵɵInheritDefinitionFeature */]], decls: 14, vars: 12, consts: [[\"collapsible\", \"\"], [\"slot\", \"start\"], [3, \"text\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [\"slot\", \"end\"], [1, \"limited-width\"], [\"slot\", \"fixed\", 3, \"disabled\", \"ionRefresh\"], [3, \"pullingText\"], [3, \"module\", \"courseId\", \"dataRetrieved\"]], template: function AddonModScormIndexPage_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"Ec\" /* ɵɵelementStart */](0, \"ion-header\", 0);\n                core[\"Ec\" /* ɵɵelementStart */](1, \"ion-toolbar\");\n                core[\"Ec\" /* ɵɵelementStart */](2, \"ion-buttons\", 1);\n                core[\"zc\" /* ɵɵelement */](3, \"ion-back-button\", 2);\n                core[\"Pc\" /* ɵɵpipe */](4, \"translate\");\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Ec\" /* ɵɵelementStart */](5, \"ion-title\");\n                core[\"Ec\" /* ɵɵelementStart */](6, \"h1\");\n                core[\"zc\" /* ɵɵelement */](7, \"core-format-text\", 3);\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"zc\" /* ɵɵelement */](8, \"ion-buttons\", 4);\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Ec\" /* ɵɵelementStart */](9, \"ion-content\", 5);\n                core[\"Ec\" /* ɵɵelementStart */](10, \"ion-refresher\", 6);\n                core[\"Mc\" /* ɵɵlistener */](\"ionRefresh\", function AddonModScormIndexPage_Template_ion_refresher_ionRefresh_10_listener($event) { return ctx.activityComponent == null ? null : ctx.activityComponent.doRefresh($event.target); });\n                core[\"zc\" /* ɵɵelement */](11, \"ion-refresher-content\", 7);\n                core[\"Pc\" /* ɵɵpipe */](12, \"translate\");\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Ec\" /* ɵɵelementStart */](13, \"addon-mod-scorm-index\", 8);\n                core[\"Mc\" /* ɵɵlistener */](\"dataRetrieved\", function AddonModScormIndexPage_Template_addon_mod_scorm_index_dataRetrieved_13_listener($event) { return ctx.updateData($event); });\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Dc\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"lc\" /* ɵɵadvance */](3);\n                core[\"Vc\" /* ɵɵproperty */](\"text\", core[\"Qc\" /* ɵɵpipeBind1 */](4, 8, \"core.back\"));\n                core[\"lc\" /* ɵɵadvance */](4);\n                core[\"Vc\" /* ɵɵproperty */](\"text\", ctx.title)(\"contextInstanceId\", ctx.module == null ? null : ctx.module.id)(\"courseId\", ctx.courseId);\n                core[\"lc\" /* ɵɵadvance */](3);\n                core[\"Vc\" /* ɵɵproperty */](\"disabled\", ctx.activityComponent == null ? null : ctx.activityComponent.showLoading);\n                core[\"lc\" /* ɵɵadvance */](1);\n                core[\"Wc\" /* ɵɵpropertyInterpolate */](\"pullingText\", core[\"Qc\" /* ɵɵpipeBind1 */](12, 10, \"core.pulltorefresh\"));\n                core[\"lc\" /* ɵɵadvance */](2);\n                core[\"Vc\" /* ɵɵproperty */](\"module\", ctx.module)(\"courseId\", ctx.courseId);\n            }\n        }, directives: [ionic_angular[\"C\" /* IonHeader */], collapsible_header[\"b\" /* CoreCollapsibleHeaderDirective */], ionic_angular[\"Ab\" /* IonToolbar */], ionic_angular[\"m\" /* IonButtons */], ionic_angular[\"h\" /* IonBackButton */], ionic_angular[\"i\" /* IonBackButtonDelegate */], ionic_angular[\"yb\" /* IonTitle */], format_text[\"a\" /* CoreFormatTextDirective */], content[\"a\" /* CoreContentDirective */], ionic_angular[\"v\" /* IonContent */], ionic_angular[\"bb\" /* IonRefresher */], ionic_angular[\"cb\" /* IonRefresherContent */], index[\"a\" /* AddonModScormIndexComponent */]], pipes: [ngx_translate_core[\"d\" /* TranslatePipe */]], encapsulation: 2 });\n    return AddonModScormIndexPage;\n})();\nconst ɵAddonModScormIndexPage_BaseFactory = /*@__PURE__*/ core[\"Gc\" /* ɵɵgetInheritedFactory */](index_AddonModScormIndexPage);\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(\"mrSG\");\n\n// EXTERNAL MODULE: ./src/core/services/navigator.ts\nvar services_navigator = __webpack_require__(\"pHTc\");\n\n// EXTERNAL MODULE: ./src/core/services/sites.ts\nvar sites = __webpack_require__(\"9+EE\");\n\n// EXTERNAL MODULE: ./src/core/services/sync.ts\nvar sync = __webpack_require__(\"uT8i\");\n\n// EXTERNAL MODULE: ./src/core/services/utils/dom.ts + 2 modules\nvar dom = __webpack_require__(\"3LXp\");\n\n// EXTERNAL MODULE: ./src/core/services/utils/time.ts\nvar time = __webpack_require__(\"Q98t\");\n\n// EXTERNAL MODULE: ./src/core/services/utils/utils.ts\nvar utils = __webpack_require__(\"bFG1\");\n\n// EXTERNAL MODULE: ./src/core/singletons/events.ts\nvar events = __webpack_require__(\"fjkH\");\n\n// EXTERNAL MODULE: ./src/addons/mod/scorm/services/scorm.ts\nvar services_scorm = __webpack_require__(\"bKlM\");\n\n// CONCATENATED MODULE: ./src/addons/mod/scorm/classes/data-model-12.ts\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n// Standard Data Type Definition.\nconst CMI_STRING_256 = '^[\\\\u0000-\\\\uFFFF]{0,255}$';\nconst CMI_STRING_4096 = '^[\\\\u0000-\\\\uFFFF]{0,4096}$';\nconst CMI_TIME = '^([0-2]{1}[0-9]{1}):([0-5]{1}[0-9]{1}):([0-5]{1}[0-9]{1})(.[0-9]{1,2})?$';\nconst CMI_TIMESPAN = '^([0-9]{2,4}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$';\nconst CMI_INTEGER = '^\\\\d+$'; // eslint-disable-line @typescript-eslint/no-unused-vars\nconst CMI_SINTEGER = '^-?([0-9]+)$';\nconst CMI_DECIMAL = '^-?([0-9]{0,3})(.[0-9]*)?$';\nconst CMI_IDENTIFIER = '^[\\\\u0021-\\\\u007E]{0,255}$';\nconst CMI_FEEDBACK = CMI_STRING_256; // This must be redefined.\nconst CMI_INDEX = '[._](\\\\d+).';\n// Vocabulary Data Type Definition.\nconst CMI_STATUS = '^passed$|^completed$|^failed$|^incomplete$|^browsed$';\nconst CMI_STATUS_2 = '^passed$|^completed$|^failed$|^incomplete$|^browsed$|^not attempted$';\nconst CMI_EXIT = '^time-out$|^suspend$|^logout$|^$';\nconst CMI_TYPE = '^true-false$|^choice$|^fill-in$|^matching$|^performance$|^sequencing$|^likert$|^numeric$';\nconst CMI_RESULT = '^correct$|^wrong$|^unanticipated$|^neutral$|^([0-9]{0,3})?(.[0-9]*)?$';\nconst NAV_EVENT = '^previous$|^continue$';\n// Children lists.\nconst CMI_CHILDREN = 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions';\nconst CORE_CHILDREN = 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,' +\n    'exit,session_time';\nconst SCORE_CHILDREN = 'raw,min,max';\nconst COMMENTS_CHILDREN = 'content,location,time';\nconst OBJECTIVES_CHILDREN = 'id,score,status';\nconst CORRECT_RESPONSES_CHILDREN = 'pattern'; // eslint-disable-line @typescript-eslint/no-unused-vars\nconst STUDENT_DATA_CHILDREN = 'mastery_score,max_time_allowed,time_limit_action';\nconst STUDENT_PREFERENCE_CHILDREN = 'audio,language,speed,text';\nconst INTERACTIONS_CHILDREN = 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency';\n// Data ranges.\nconst SCORE_RANGE = '0#100';\nconst AUDIO_RANGE = '-1#100';\nconst SPEED_RANGE = '-100#100';\nconst WEIGHTING_RANGE = '-100#100';\nconst TEXT_RANGE = '-1#1';\n// Error messages.\nconst ERROR_STRINGS = {\n    0: 'No error',\n    101: 'General exception',\n    201: 'Invalid argument error',\n    202: 'Element cannot have children',\n    203: 'Element not an array - cannot have count',\n    301: 'Not initialized',\n    401: 'Not implemented error',\n    402: 'Invalid set value, element is a keyword',\n    403: 'Element is read only',\n    404: 'Element is write only',\n    405: 'Incorrect data type',\n};\n/**\n * SCORM data model implementation for version 1.2.\n */\n/* eslint-disable @typescript-eslint/naming-convention */\nclass data_model_12_AddonModScormDataModel12 {\n    /**\n     * Constructor.\n     *\n     * @param siteId Site ID.\n     * @param scorm SCORM.\n     * @param scoId Current SCO ID.\n     * @param attempt Attempt number.\n     * @param userData The user default data.\n     * @param mode Mode being played. By default, MODENORMAL.\n     * @param offline Whether the attempt is offline.\n     * @param canSaveTracks Whether the user can save tracks.\n     */\n    constructor(siteId, scorm, scoId, attempt, userData, mode = services_scorm[\"b\" /* AddonModScormProvider */].MODENORMAL, offline = false, canSaveTracks = true) {\n        this.siteId = siteId;\n        this.scorm = scorm;\n        this.scoId = scoId;\n        this.attempt = attempt;\n        this.userData = userData;\n        this.mode = mode;\n        this.offline = offline;\n        this.canSaveTracks = canSaveTracks;\n        this.currentUserData = {}; // Current user data.\n        this.def = {}; // Object containing the default values.\n        this.defExtra = {}; // Objectives and interactions (all .n. elems).\n        this.dataModel = {}; // The SCORM 1.2 data model.\n        this.initialized = false; // Whether LMSInitialize has been called.\n        this.errorCode = '0'; // Last error.\n        this.init(userData);\n    }\n    /**\n     * Utility function for adding two times in format hh:mm:ss.\n     *\n     * @param first First time.\n     * @param second Second time.\n     * @return Total time.\n     */\n    addTime(first, second) {\n        const sFirst = first.split(':');\n        const sSecond = second.split(':');\n        const cFirst = sFirst[2].split('.');\n        const cSecond = sSecond[2].split('.');\n        let change = 0;\n        let firstCents = 0; // Cents.\n        if (cFirst.length > 1) {\n            firstCents = parseInt(cFirst[1], 10);\n        }\n        let secondCents = 0;\n        if (cSecond.length > 1) {\n            secondCents = parseInt(cSecond[1], 10);\n        }\n        let cents = firstCents + secondCents;\n        change = Math.floor(cents / 100);\n        cents = cents - (change * 100);\n        if (Math.floor(cents) < 10) {\n            cents = '0' + cents.toString();\n        }\n        let secs = parseInt(cFirst[0], 10) + parseInt(cSecond[0], 10) + change; // Seconds.\n        change = Math.floor(secs / 60);\n        secs = secs - (change * 60);\n        if (Math.floor(secs) < 10) {\n            secs = '0' + secs.toString();\n        }\n        let mins = parseInt(sFirst[1], 10) + parseInt(sSecond[1], 10) + change; // Minutes.\n        change = Math.floor(mins / 60);\n        mins = mins - (change * 60);\n        if (mins < 10) {\n            mins = '0' + mins.toString();\n        }\n        let hours = parseInt(sFirst[0], 10) + parseInt(sSecond[0], 10) + change; // Hours.\n        if (hours < 10) {\n            hours = '0' + hours.toString();\n        }\n        if (cents != '0') {\n            return hours + ':' + mins + ':' + secs + '.' + cents;\n        }\n        else {\n            return hours + ':' + mins + ':' + secs;\n        }\n    }\n    /**\n     * Collect all the user tracking data that must be persisted in the system, this is usually called by LMSCommit().\n     *\n     * @return Collected data.\n     */\n    collectData() {\n        if (!this.currentUserData[this.scoId]) {\n            return [];\n        }\n        const data = [];\n        for (const element in this.currentUserData[this.scoId].userdata) {\n            // Ommit for example the nav. elements and the session time element.\n            if (element.substring(0, 3) != 'cmi' || element == 'cmi.core.session_time') {\n                continue;\n            }\n            // Get the generic name for this element (e.g. convert 'cmi.interactions.1.id' to 'cmi.interactions.n.id')\n            const expression = new RegExp(CMI_INDEX, 'g');\n            const elementModel = element.replace(expression, '.n.');\n            // Check if this specific element is not defined in the datamodel, but the generic element name is.\n            if (this.dataModel[this.scoId][element] === undefined && this.dataModel[this.scoId][elementModel] !== undefined) {\n                // Add this element to the data model (by cloning the generic element) so we can track changes to it.\n                this.dataModel[this.scoId][element] = utils[\"a\" /* CoreUtils */].clone(this.dataModel[this.scoId][elementModel]);\n            }\n            // Check if the current element exists in the datamodel and it's not a read only element.\n            if (this.dataModel[this.scoId][element] === undefined || this.dataModel[this.scoId][element].mod == 'r') {\n                continue;\n            }\n            const el = {\n                // Moodle stores the organizations and interactions using _n. instead .n.\n                element: element.replace(expression, '_$1.'),\n                value: this.getEl(element),\n            };\n            // Check if the element has a default value.\n            if (this.dataModel[this.scoId][element].defaultvalue !== undefined) {\n                // Check if the default value is different from the current value.\n                if (this.dataModel[this.scoId][element].defaultvalue !== el.value) {\n                    data.push(el);\n                    // Update the element default to reflect the current committed value.\n                    this.dataModel[this.scoId][element].defaultvalue = el.value;\n                }\n            }\n            else {\n                data.push(el);\n                // No default value for the element, so set it now.\n                this.dataModel[this.scoId][element].defaultvalue = el.value;\n            }\n        }\n        return data;\n    }\n    /**\n     * Get the value of the given element from the non-persistent (current) user data.\n     *\n     * @param el The element\n     * @return The element value\n     */\n    getEl(el) {\n        if (this.currentUserData[this.scoId] && this.currentUserData[this.scoId].userdata[el] !== undefined) {\n            return this.currentUserData[this.scoId].userdata[el];\n        }\n        return '';\n    }\n    /**\n     * Initialize the model.\n     *\n     * @param userData The user default data.\n     */\n    init(userData) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        // Prepare the definition array containing the default values.\n        for (const scoId in userData) {\n            const sco = userData[scoId];\n            this.def[scoId] = sco.defaultdata;\n            this.defExtra[scoId] = sco.userdata;\n        }\n        // Set up data model for each SCO.\n        for (const scoId in this.def) {\n            this.dataModel[scoId] = {\n                'cmi._children': { defaultvalue: CMI_CHILDREN, mod: 'r', writeerror: '402' },\n                'cmi._version': { defaultvalue: '3.4', mod: 'r', writeerror: '402' },\n                'cmi.core._children': { defaultvalue: CORE_CHILDREN, mod: 'r', writeerror: '402' },\n                'cmi.core.student_id': { defaultvalue: this.def[scoId]['cmi.core.student_id'], mod: 'r', writeerror: '403' },\n                'cmi.core.student_name': { defaultvalue: this.def[scoId]['cmi.core.student_name'], mod: 'r', writeerror: '403' },\n                'cmi.core.lesson_location': {\n                    defaultvalue: this.def[scoId]['cmi.core.lesson_location'],\n                    format: CMI_STRING_256,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.core.credit': { defaultvalue: this.def[scoId]['cmi.core.credit'], mod: 'r', writeerror: '403' },\n                'cmi.core.lesson_status': {\n                    defaultvalue: this.def[scoId]['cmi.core.lesson_status'],\n                    format: CMI_STATUS,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.core.entry': { defaultvalue: this.def[scoId]['cmi.core.entry'], mod: 'r', writeerror: '403' },\n                'cmi.core.score._children': { defaultvalue: SCORE_CHILDREN, mod: 'r', writeerror: '402' },\n                'cmi.core.score.raw': {\n                    defaultvalue: this.def[scoId]['cmi.core.score.raw'],\n                    format: CMI_DECIMAL,\n                    range: SCORE_RANGE,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.core.score.max': {\n                    defaultvalue: this.def[scoId]['cmi.core.score.max'],\n                    format: CMI_DECIMAL,\n                    range: SCORE_RANGE,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.core.score.min': {\n                    defaultvalue: this.def[scoId]['cmi.core.score.min'],\n                    format: CMI_DECIMAL,\n                    range: SCORE_RANGE,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.core.total_time': { defaultvalue: this.def[scoId]['cmi.core.total_time'], mod: 'r', writeerror: '403' },\n                'cmi.core.lesson_mode': { defaultvalue: this.def[scoId]['cmi.core.lesson_mode'], mod: 'r', writeerror: '403' },\n                'cmi.core.exit': {\n                    defaultvalue: this.def[scoId]['cmi.core.exit'],\n                    format: CMI_EXIT,\n                    mod: 'w',\n                    readerror: '404',\n                    writeerror: '405',\n                },\n                'cmi.core.session_time': {\n                    format: CMI_TIMESPAN,\n                    mod: 'w',\n                    defaultvalue: '00:00:00',\n                    readerror: '404',\n                    writeerror: '405',\n                },\n                'cmi.suspend_data': {\n                    defaultvalue: this.def[scoId]['cmi.suspend_data'],\n                    format: CMI_STRING_4096,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.launch_data': { defaultvalue: this.def[scoId]['cmi.launch_data'], mod: 'r', writeerror: '403' },\n                'cmi.comments': {\n                    defaultvalue: this.def[scoId]['cmi.comments'],\n                    format: CMI_STRING_4096,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                // Deprecated evaluation attributes.\n                'cmi.evaluation.comments._count': { defaultvalue: '0', mod: 'r', writeerror: '402' },\n                'cmi.evaluation.comments._children': { defaultvalue: COMMENTS_CHILDREN, mod: 'r', writeerror: '402' },\n                'cmi.evaluation.comments.n.content': {\n                    defaultvalue: '',\n                    pattern: CMI_INDEX,\n                    format: CMI_STRING_256,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.evaluation.comments.n.location': {\n                    defaultvalue: '',\n                    pattern: CMI_INDEX,\n                    format: CMI_STRING_256,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.evaluation.comments.n.time': {\n                    defaultvalue: '',\n                    pattern: CMI_INDEX,\n                    format: CMI_TIME,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.comments_from_lms': { mod: 'r', writeerror: '403' },\n                'cmi.objectives._children': { defaultvalue: OBJECTIVES_CHILDREN, mod: 'r', writeerror: '402' },\n                'cmi.objectives._count': { mod: 'r', defaultvalue: '0', writeerror: '402' },\n                'cmi.objectives.n.id': { pattern: CMI_INDEX, format: CMI_IDENTIFIER, mod: 'rw', writeerror: '405' },\n                'cmi.objectives.n.score._children': { pattern: CMI_INDEX, mod: 'r', writeerror: '402' },\n                'cmi.objectives.n.score.raw': {\n                    defaultvalue: '',\n                    pattern: CMI_INDEX,\n                    format: CMI_DECIMAL,\n                    range: SCORE_RANGE,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.objectives.n.score.min': {\n                    defaultvalue: '',\n                    pattern: CMI_INDEX,\n                    format: CMI_DECIMAL,\n                    range: SCORE_RANGE,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.objectives.n.score.max': {\n                    defaultvalue: '',\n                    pattern: CMI_INDEX,\n                    format: CMI_DECIMAL,\n                    range: SCORE_RANGE,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.objectives.n.status': { pattern: CMI_INDEX, format: CMI_STATUS_2, mod: 'rw', writeerror: '405' },\n                'cmi.student_data._children': { defaultvalue: STUDENT_DATA_CHILDREN, mod: 'r', writeerror: '402' },\n                'cmi.student_data.mastery_score': {\n                    defaultvalue: this.def[scoId]['cmi.student_data.mastery_score'],\n                    mod: 'r',\n                    writeerror: '403',\n                },\n                'cmi.student_data.max_time_allowed': {\n                    defaultvalue: this.def[scoId]['cmi.student_data.max_time_allowed'],\n                    mod: 'r',\n                    writeerror: '403',\n                },\n                'cmi.student_data.time_limit_action': {\n                    defaultvalue: this.def[scoId]['cmi.student_data.time_limit_action'],\n                    mod: 'r',\n                    writeerror: '403',\n                },\n                'cmi.student_preference._children': {\n                    defaultvalue: STUDENT_PREFERENCE_CHILDREN,\n                    mod: 'r',\n                    writeerror: '402',\n                },\n                'cmi.student_preference.audio': {\n                    defaultvalue: this.def[scoId]['cmi.student_preference.audio'],\n                    format: CMI_SINTEGER,\n                    range: AUDIO_RANGE,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.student_preference.language': {\n                    defaultvalue: this.def[scoId]['cmi.student_preference.language'],\n                    format: CMI_STRING_256,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.student_preference.speed': {\n                    defaultvalue: this.def[scoId]['cmi.student_preference.speed'],\n                    format: CMI_SINTEGER,\n                    range: SPEED_RANGE,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.student_preference.text': {\n                    defaultvalue: this.def[scoId]['cmi.student_preference.text'],\n                    format: CMI_SINTEGER,\n                    range: TEXT_RANGE,\n                    mod: 'rw',\n                    writeerror: '405',\n                },\n                'cmi.interactions._children': { defaultvalue: INTERACTIONS_CHILDREN, mod: 'r', writeerror: '402' },\n                'cmi.interactions._count': { mod: 'r', defaultvalue: '0', writeerror: '402' },\n                'cmi.interactions.n.id': {\n                    pattern: CMI_INDEX,\n                    format: CMI_IDENTIFIER,\n                    mod: 'w',\n                    readerror: '404',\n                    writeerror: '405',\n                },\n                'cmi.interactions.n.objectives._count': { pattern: CMI_INDEX, mod: 'r', defaultvalue: '0', writeerror: '402' },\n                'cmi.interactions.n.objectives.n.id': {\n                    pattern: CMI_INDEX,\n                    format: CMI_IDENTIFIER,\n                    mod: 'w',\n                    readerror: '404',\n                    writeerror: '405',\n                },\n                'cmi.interactions.n.time': { pattern: CMI_INDEX, format: CMI_TIME, mod: 'w', readerror: '404', writeerror: '405' },\n                'cmi.interactions.n.type': { pattern: CMI_INDEX, format: CMI_TYPE, mod: 'w', readerror: '404', writeerror: '405' },\n                'cmi.interactions.n.correct_responses._count': {\n                    pattern: CMI_INDEX,\n                    mod: 'r',\n                    defaultvalue: '0',\n                    writeerror: '402',\n                },\n                'cmi.interactions.n.correct_responses.n.pattern': {\n                    pattern: CMI_INDEX,\n                    format: CMI_FEEDBACK,\n                    mod: 'w',\n                    readerror: '404',\n                    writeerror: '405',\n                },\n                'cmi.interactions.n.weighting': {\n                    pattern: CMI_INDEX,\n                    format: CMI_DECIMAL,\n                    range: WEIGHTING_RANGE,\n                    mod: 'w',\n                    readerror: '404',\n                    writeerror: '405',\n                },\n                'cmi.interactions.n.student_response': {\n                    pattern: CMI_INDEX,\n                    format: CMI_FEEDBACK,\n                    mod: 'w',\n                    readerror: '404',\n                    writeerror: '405',\n                },\n                'cmi.interactions.n.result': {\n                    pattern: CMI_INDEX,\n                    format: CMI_RESULT,\n                    mod: 'w',\n                    readerror: '404',\n                    writeerror: '405',\n                },\n                'cmi.interactions.n.latency': {\n                    pattern: CMI_INDEX,\n                    format: CMI_TIMESPAN,\n                    mod: 'w',\n                    readerror: '404',\n                    writeerror: '405',\n                },\n                'nav.event': { defaultvalue: '', format: NAV_EVENT, mod: 'w', readerror: '404', writeerror: '405' },\n            };\n            this.currentUserData[scoId] = {\n                scoid: Number(scoId),\n                userdata: {},\n                defaultdata: {},\n            };\n            // Load default values.\n            for (const element in this.dataModel[scoId]) {\n                if (element.match(/\\.n\\./) === null) {\n                    const defaultValue = this.dataModel[scoId][element].defaultvalue;\n                    if (defaultValue !== undefined) {\n                        this.currentUserData[scoId].userdata[element] = defaultValue;\n                    }\n                }\n            }\n            // Load initial user data for current SCO.\n            for (const element in this.def[scoId]) {\n                if (element.match(/\\.n\\./) === null) {\n                    const defaultValue = this.dataModel[scoId][element].defaultvalue;\n                    if (defaultValue !== undefined) {\n                        this.currentUserData[scoId].userdata[element] = defaultValue;\n                    }\n                    else if (this.defExtra[scoId][element] !== undefined) {\n                        // Check in user data values.\n                        this.currentUserData[scoId].userdata[element] = this.defExtra[scoId][element];\n                    }\n                    else {\n                        this.currentUserData[scoId].userdata[element] = '';\n                    }\n                }\n            }\n            // Load interactions and objectives, and init the counters.\n            const expression = new RegExp(CMI_INDEX, 'g');\n            for (const element in this.defExtra[scoId]) {\n                let counterElement = '';\n                let currentCounterIndex = '0';\n                // This check for an indexed element. cmi.objectives.1.id or cmi.objectives_1.id.\n                if (element.match(expression)) {\n                    // Normalize to the expected value according the standard.\n                    // Moodle stores this values using _n. instead .n.\n                    const elementDotFormat = element.replace(expression, '.$1.');\n                    this.currentUserData[scoId].userdata[elementDotFormat] = this.defExtra[scoId][element];\n                    // Get the correct counter and current index.\n                    if (elementDotFormat.indexOf('cmi.evaluation.comments') === 0) {\n                        counterElement = 'cmi.evaluation.comments._count';\n                        currentCounterIndex = ((_a = elementDotFormat.match(/.(\\d+)./)) === null || _a === void 0 ? void 0 : _a[1]) || '0';\n                    }\n                    else if (elementDotFormat.indexOf('cmi.objectives') === 0) {\n                        counterElement = 'cmi.objectives._count';\n                        currentCounterIndex = ((_b = elementDotFormat.match(/.(\\d+)./)) === null || _b === void 0 ? void 0 : _b[1]) || '0';\n                    }\n                    else if (elementDotFormat.indexOf('cmi.interactions') === 0) {\n                        if (elementDotFormat.indexOf('.objectives.') > 0) {\n                            const currentN = (_c = elementDotFormat.match(/cmi.interactions.(\\d+)./)) === null || _c === void 0 ? void 0 : _c[1];\n                            currentCounterIndex = ((_d = elementDotFormat.match(/objectives.(\\d+)./)) === null || _d === void 0 ? void 0 : _d[1]) || '0';\n                            counterElement = 'cmi.interactions.' + currentN + '.objectives._count';\n                        }\n                        else if (elementDotFormat.indexOf('.correct_responses.') > 0) {\n                            const currentN = (_e = elementDotFormat.match(/cmi.interactions.(\\d+)./)) === null || _e === void 0 ? void 0 : _e[1];\n                            currentCounterIndex = ((_f = elementDotFormat.match(/correct_responses.(\\d+)./)) === null || _f === void 0 ? void 0 : _f[1]) || '0';\n                            counterElement = 'cmi.interactions.' + currentN + '.correct_responses._count';\n                        }\n                        else {\n                            counterElement = 'cmi.interactions._count';\n                            currentCounterIndex = ((_g = elementDotFormat.match(/.(\\d+)./)) === null || _g === void 0 ? void 0 : _g[1]) || '0';\n                        }\n                    }\n                    if (counterElement) {\n                        const counterData = this.currentUserData[scoId].userdata[counterElement];\n                        if (counterData === undefined) {\n                            this.currentUserData[scoId].userdata[counterElement] = 0;\n                        }\n                        // Check if we need to sum.\n                        if (Number(currentCounterIndex) == Number(counterData)) {\n                            this.currentUserData[scoId].userdata[counterElement] = Number(counterData) + 1;\n                        }\n                        if (Number(currentCounterIndex) > Number(counterData)) {\n                            this.currentUserData[scoId].userdata[counterElement] = Number(currentCounterIndex) - 1;\n                        }\n                    }\n                }\n            }\n            // Set default status.\n            if (this.currentUserData[scoId].userdata['cmi.core.lesson_status'] === '') {\n                this.currentUserData[scoId].userdata['cmi.core.lesson_status'] = 'not attempted';\n            }\n            // Define mode and credit.\n            this.currentUserData[scoId].userdata['cmi.core.credit'] = this.mode == services_scorm[\"b\" /* AddonModScormProvider */].MODENORMAL ?\n                'credit' :\n                'no-credit';\n            this.currentUserData[scoId].userdata['cmi.core.lesson_mode'] = this.mode;\n        }\n    }\n    /**\n     * Commit the changes.\n     *\n     * @param param Param.\n     * @return \"true\" if success, \"false\" otherwise.\n     */\n    LMSCommit(param) {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = undefined;\n        }\n        this.errorCode = '0';\n        if (param == '') {\n            if (this.initialized) {\n                const result = this.storeData(false);\n                // Trigger TOC update.\n                this.triggerEvent(services_scorm[\"b\" /* AddonModScormProvider */].UPDATE_TOC_EVENT);\n                this.errorCode = result ? '0' : '101';\n                // Conver to string representing a boolean.\n                return result ? 'true' : 'false';\n            }\n            else {\n                this.errorCode = '301';\n            }\n        }\n        else {\n            this.errorCode = '201';\n        }\n        return 'false';\n    }\n    /**\n     * Finish the data model.\n     *\n     * @param param Param.\n     * @return \"true\" if success, \"false\" otherwise.\n     */\n    LMSFinish(param) {\n        this.errorCode = '0';\n        if (param == '') {\n            if (this.initialized) {\n                this.initialized = false;\n                const result = this.storeData(true);\n                if (this.getEl('nav.event') != '') {\n                    if (this.getEl('nav.event') == 'continue') {\n                        this.triggerEvent(services_scorm[\"b\" /* AddonModScormProvider */].LAUNCH_NEXT_SCO_EVENT);\n                    }\n                    else {\n                        this.triggerEvent(services_scorm[\"b\" /* AddonModScormProvider */].LAUNCH_PREV_SCO_EVENT);\n                    }\n                }\n                else {\n                    if (this.scorm.auto) {\n                        this.triggerEvent(services_scorm[\"b\" /* AddonModScormProvider */].LAUNCH_NEXT_SCO_EVENT);\n                    }\n                }\n                this.errorCode = result ? '0' : '101';\n                // Trigger TOC update.\n                this.triggerEvent(services_scorm[\"b\" /* AddonModScormProvider */].UPDATE_TOC_EVENT);\n                // Conver to string representing a boolean.\n                return result ? 'true' : 'false';\n            }\n            else {\n                this.errorCode = '301';\n            }\n        }\n        else {\n            this.errorCode = '201';\n        }\n        return 'false';\n    }\n    /**\n     * Get diagnostic.\n     *\n     * @param param Param.\n     * @return Result.\n     */\n    LMSGetDiagnostic(param) {\n        if (param == '') {\n            param = this.errorCode;\n        }\n        return param;\n    }\n    /**\n     * Get the error message for a certain code.\n     *\n     * @param param Error code.\n     * @return Error message.\n     */\n    LMSGetErrorString(param) {\n        if (param != '') {\n            return ERROR_STRINGS[param];\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * Get the last error code.\n     *\n     * @return Last error code.\n     */\n    LMSGetLastError() {\n        return this.errorCode;\n    }\n    /**\n     * Get the value of a certain element.\n     *\n     * @param element Name of the element to get.\n     * @return Value.\n     */\n    LMSGetValue(element) {\n        this.errorCode = '0';\n        if (this.initialized) {\n            if (element != '') {\n                const expression = new RegExp(CMI_INDEX, 'g');\n                const elementModel = String(element).replace(expression, '.n.');\n                if (this.dataModel[this.scoId][elementModel] !== undefined) {\n                    if (this.dataModel[this.scoId][elementModel].mod != 'w') {\n                        this.errorCode = '0';\n                        return this.getEl(element);\n                    }\n                    else {\n                        this.errorCode = this.dataModel[this.scoId][elementModel].readerror || '0';\n                    }\n                }\n                else {\n                    const childrenStr = '._children';\n                    const countStr = '._count';\n                    if (elementModel.substring(elementModel.length - childrenStr.length) == childrenStr) {\n                        const parentModel = elementModel.substring(0, elementModel.length - childrenStr.length);\n                        if (this.dataModel[this.scoId][parentModel] !== undefined) {\n                            this.errorCode = '202';\n                        }\n                        else {\n                            this.errorCode = '201';\n                        }\n                    }\n                    else if (elementModel.substring(elementModel.length - countStr.length) == countStr) {\n                        const parentModel = elementModel.substring(0, elementModel.length - countStr.length);\n                        if (this.dataModel[this.scoId][parentModel] !== undefined) {\n                            this.errorCode = '203';\n                        }\n                        else {\n                            this.errorCode = '201';\n                        }\n                    }\n                    else {\n                        this.errorCode = '201';\n                    }\n                }\n            }\n            else {\n                this.errorCode = '201';\n            }\n        }\n        else {\n            this.errorCode = '301';\n        }\n        return '';\n    }\n    /**\n     * Initialize the data model.\n     *\n     * @param param Param.\n     * @return \"true\" if initialized, \"false\" otherwise.\n     */\n    LMSInitialize(param) {\n        this.errorCode = '0';\n        if (param == '') {\n            if (!this.initialized) {\n                this.initialized = true;\n                this.errorCode = '0';\n                return 'true';\n            }\n            else {\n                this.errorCode = '101';\n            }\n        }\n        else {\n            this.errorCode = '201';\n        }\n        return 'false';\n    }\n    /**\n     * Set the value of a certain element.\n     *\n     * @param element Name of the element to set.\n     * @param value Value to set.\n     * @return \"true\" if success, \"false\" otherwise.\n     */\n    LMSSetValue(element, value) {\n        var _a, _b, _c;\n        this.errorCode = '0';\n        if (this.initialized) {\n            if (element != '') {\n                let expression = new RegExp(CMI_INDEX, 'g');\n                const elementModel = String(element).replace(expression, '.n.');\n                if (this.dataModel[this.scoId][elementModel] !== undefined) {\n                    if (this.dataModel[this.scoId][elementModel].mod != 'r') {\n                        expression = new RegExp((_a = this.dataModel[this.scoId][elementModel].format) !== null && _a !== void 0 ? _a : '');\n                        value = value + '';\n                        const matches = value.match(expression);\n                        if (matches != null) {\n                            // Create dynamic data model element.\n                            if (element != elementModel) {\n                                // Init default counters and values.\n                                if (element.indexOf('cmi.objectives') === 0) {\n                                    const currentN = (_b = element.match(/cmi.objectives.(\\d+)./)) === null || _b === void 0 ? void 0 : _b[1];\n                                    const counterElement = 'cmi.objectives.' + currentN + '.score';\n                                    if (this.currentUserData[this.scoId].userdata[counterElement + '._children'] === undefined) {\n                                        this.setEl(this.currentUserData[this.scoId].userdata[counterElement + '._children'], SCORE_CHILDREN);\n                                        this.setEl(this.currentUserData[this.scoId].userdata[counterElement + '.raw'], '');\n                                        this.setEl(this.currentUserData[this.scoId].userdata[counterElement + '.min'], '');\n                                        this.setEl(this.currentUserData[this.scoId].userdata[counterElement + '.max'], '');\n                                    }\n                                }\n                                else if (element.indexOf('cmi.interactions') === 0) {\n                                    const currentN = (_c = element.match(/cmi.interactions.(\\d+)./)) === null || _c === void 0 ? void 0 : _c[1];\n                                    let counterElement = 'cmi.interactions.' + currentN + '.objectives._count';\n                                    if (this.currentUserData[this.scoId].userdata[counterElement] === undefined) {\n                                        this.setEl(counterElement, 0);\n                                    }\n                                    counterElement = 'cmi.interactions.' + currentN + '.correct_responses._count';\n                                    if (this.currentUserData[this.scoId].userdata[counterElement] === undefined) {\n                                        this.setEl(counterElement, 0);\n                                    }\n                                }\n                                const elementIndexes = element.split('.');\n                                let subElement = 'cmi';\n                                for (let i = 1; i < elementIndexes.length - 1; i++) {\n                                    const elementIndex = elementIndexes[i];\n                                    if (elementIndexes[i + 1].match(/^\\d+$/)) {\n                                        const counterElement = subElement + '.' + elementIndex + '._count';\n                                        if (this.currentUserData[this.scoId].userdata[counterElement] === undefined) {\n                                            this.setEl(counterElement, 0);\n                                        }\n                                        if (elementIndexes[i + 1] == this.getEl(counterElement)) {\n                                            const count = this.getEl(counterElement);\n                                            this.setEl(counterElement, Number(count) + 1);\n                                        }\n                                        if (elementIndexes[i + 1] > this.getEl(counterElement)) {\n                                            this.errorCode = '201';\n                                        }\n                                        subElement = subElement.concat('.' + elementIndex + '.' + elementIndexes[i + 1]);\n                                        i++;\n                                    }\n                                    else {\n                                        subElement = subElement.concat('.' + elementIndex);\n                                    }\n                                }\n                                element = subElement.concat('.' + elementIndexes[elementIndexes.length - 1]);\n                            }\n                            // Store data.\n                            if (this.errorCode == '0') {\n                                if (this.scorm.autocommit && !this.timeout) {\n                                    this.timeout = window.setTimeout(this.LMSCommit.bind(this), 60000, ['']);\n                                }\n                                const range = this.dataModel[this.scoId][elementModel].range;\n                                if (range !== undefined) {\n                                    const ranges = range.split('#');\n                                    value = Number(value);\n                                    if (value >= Number(ranges[0]) && value <= Number(ranges[1])) {\n                                        this.setEl(element, Number(value));\n                                        this.errorCode = '0';\n                                        return 'true';\n                                    }\n                                    else {\n                                        this.errorCode = this.dataModel[this.scoId][elementModel].writeerror;\n                                    }\n                                }\n                                else {\n                                    if (element == 'cmi.comments') {\n                                        this.setEl('cmi.comments', this.getEl('cmi.comments') + value);\n                                    }\n                                    else {\n                                        this.setEl(element, value);\n                                    }\n                                    this.errorCode = '0';\n                                    return 'true';\n                                }\n                            }\n                        }\n                        else {\n                            this.errorCode = this.dataModel[this.scoId][elementModel].writeerror;\n                        }\n                    }\n                    else {\n                        this.errorCode = this.dataModel[this.scoId][elementModel].writeerror;\n                    }\n                }\n                else {\n                    this.errorCode = '201';\n                }\n            }\n            else {\n                this.errorCode = '201';\n            }\n        }\n        else {\n            this.errorCode = '301';\n        }\n        return 'false';\n    }\n    /**\n     * Set a SCO ID.\n     * The scoId is like a pointer to be able to retrieve the SCO default values and set the new ones in the overall SCORM\n     * data structure.\n     *\n     * @param scoId The new SCO id.\n     */\n    loadSco(scoId) {\n        this.scoId = scoId;\n    }\n    /**\n     * Set the value of the given element in the non-persistent (current) user data.\n     *\n     * @param el The element.\n     * @param value The value.\n     */\n    setEl(el, value) {\n        this.currentUserData[this.scoId] = this.currentUserData[this.scoId] || {\n            scoid: this.scoId,\n            userdata: {},\n            defaultdata: {},\n        };\n        this.currentUserData[this.scoId].userdata[el] = value;\n    }\n    /**\n     * Set offline mode to true or false.\n     *\n     * @param offline True if offline, false otherwise.\n     */\n    setOffline(offline) {\n        this.offline = offline;\n    }\n    /**\n     * Persist the current user data (this is usually called by LMSCommit).\n     *\n     * @param storeTotalTime If true, we need to calculate the total time too.\n     * @return True if success, false otherwise.\n     */\n    storeData(storeTotalTime) {\n        if (!this.canSaveTracks) {\n            return true;\n        }\n        let tracks;\n        if (storeTotalTime) {\n            if (this.getEl('cmi.core.lesson_status') == 'not attempted') {\n                this.setEl('cmi.core.lesson_status', 'completed');\n            }\n            if (this.getEl('cmi.core.lesson_mode') == services_scorm[\"b\" /* AddonModScormProvider */].MODENORMAL) {\n                if (this.getEl('cmi.core.credit') == 'credit') {\n                    if (this.getEl('cmi.student_data.mastery_score') !== '' && this.getEl('cmi.core.score.raw') !== '') {\n                        if (parseFloat(this.getEl('cmi.core.score.raw')) >=\n                            parseFloat(this.getEl('cmi.student_data.mastery_score'))) {\n                            this.setEl('cmi.core.lesson_status', 'passed');\n                        }\n                        else {\n                            this.setEl('cmi.core.lesson_status', 'failed');\n                        }\n                    }\n                }\n            }\n            if (this.getEl('cmi.core.lesson_mode') == services_scorm[\"b\" /* AddonModScormProvider */].MODEBROWSE) {\n                if (this.dataModel[this.scoId]['cmi.core.lesson_status'].defaultvalue == '' &&\n                    this.getEl('cmi.core.lesson_status') == 'not attempted') {\n                    this.setEl('cmi.core.lesson_status', 'browsed');\n                }\n            }\n            tracks = this.collectData();\n            tracks.push(this.totalTime());\n        }\n        else {\n            tracks = this.collectData();\n        }\n        const ok = services_scorm[\"a\" /* AddonModScorm */].saveTracksSync(this.scoId, this.attempt, tracks, this.scorm, this.offline, this.currentUserData);\n        if (this.offline || ok) {\n            return ok;\n        }\n        // Failure storing data in online. Go offline.\n        this.offline = true;\n        this.triggerEvent(services_scorm[\"b\" /* AddonModScormProvider */].GO_OFFLINE_EVENT);\n        return services_scorm[\"a\" /* AddonModScorm */].saveTracksSync(this.scoId, this.attempt, tracks, this.scorm, this.offline, this.currentUserData);\n    }\n    /**\n     * Utility function for calculating the total time spent in the SCO.\n     *\n     * @return Total time element.\n     */\n    totalTime() {\n        const totalTime = this.addTime(this.getEl('cmi.core.total_time'), this.getEl('cmi.core.session_time'));\n        return { element: 'cmi.core.total_time', value: totalTime };\n    }\n    /**\n     * Convenience function to trigger events.\n     *\n     * @param name Name of the event to trigger.\n     */\n    triggerEvent(name) {\n        events[\"b\" /* CoreEvents */].trigger(name, {\n            scormId: this.scorm.id,\n            scoId: this.scoId,\n            attempt: this.attempt,\n        }, this.siteId);\n    }\n}\n\n// EXTERNAL MODULE: ./src/addons/mod/scorm/components/toc/toc.ts\nvar toc = __webpack_require__(\"8ykv\");\n\n// EXTERNAL MODULE: ./src/addons/mod/scorm/services/scorm-helper.ts\nvar scorm_helper = __webpack_require__(\"pisK\");\n\n// EXTERNAL MODULE: ./src/addons/mod/scorm/services/scorm-sync.ts\nvar scorm_sync = __webpack_require__(\"G82x\");\n\n// EXTERNAL MODULE: ./src/core/features/mainmenu/pages/menu/menu.ts\nvar menu = __webpack_require__(\"tVmb\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js\nvar common = __webpack_require__(\"ofXK\");\n\n// EXTERNAL MODULE: ./src/core/components/loading/loading.ts\nvar loading = __webpack_require__(\"PgjG\");\n\n// EXTERNAL MODULE: ./src/core/components/button-with-spinner/button-with-spinner.ts\nvar button_with_spinner = __webpack_require__(\"3zv0\");\n\n// EXTERNAL MODULE: ./src/core/directives/update-non-reactive-attributes.ts\nvar update_non_reactive_attributes = __webpack_require__(\"ACYt\");\n\n// EXTERNAL MODULE: ./src/core/directives/fa-icon.ts\nvar fa_icon = __webpack_require__(\"3CSS\");\n\n// EXTERNAL MODULE: ./src/core/components/iframe/iframe.ts\nvar iframe = __webpack_require__(\"qNqN\");\n\n// EXTERNAL MODULE: ./src/core/components/navigation-bar/navigation-bar.ts\nvar navigation_bar = __webpack_require__(\"/BoF\");\n\n// EXTERNAL MODULE: ./src/core/directives/collapsible-footer.ts\nvar collapsible_footer = __webpack_require__(\"3jOR\");\n\n// CONCATENATED MODULE: ./src/addons/mod/scorm/pages/player/player.ts\n\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r6 = core[\"Fc\" /* ɵɵgetCurrentView */]();\n        core[\"Ec\" /* ɵɵelementStart */](0, \"ion-button\", 11);\n        core[\"Mc\" /* ɵɵlistener */](\"click\", function AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template_ion_button_click_0_listener() { core[\"fd\" /* ɵɵrestoreView */](_r6); const ctx_r5 = core[\"Oc\" /* ɵɵnextContext */](2); return ctx_r5.openToc(); });\n        core[\"Pc\" /* ɵɵpipe */](1, \"translate\");\n        core[\"zc\" /* ɵɵelement */](2, \"ion-icon\", 12);\n        core[\"Dc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        core[\"mc\" /* ɵɵattribute */](\"aria-label\", core[\"Qc\" /* ɵɵpipeBind1 */](1, 1, \"addon.mod_scorm.toc\"));\n    }\n}\nfunction AddonModScormPlayerPage_core_button_with_spinner_9_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Ec\" /* ɵɵelementStart */](0, \"core-button-with-spinner\", 9);\n        core[\"nd\" /* ɵɵtemplate */](1, AddonModScormPlayerPage_core_button_with_spinner_9_ion_button_1_Template, 3, 3, \"ion-button\", 10);\n        core[\"Dc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r0 = core[\"Oc\" /* ɵɵnextContext */]();\n        core[\"Vc\" /* ɵɵproperty */](\"loading\", ctx_r0.loadingToc);\n        core[\"lc\" /* ɵɵadvance */](1);\n        core[\"Vc\" /* ɵɵproperty */](\"ngIf\", ctx_r0.toc.length);\n    }\n}\nfunction AddonModScormPlayerPage_core_iframe_12_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"zc\" /* ɵɵelement */](0, \"core-iframe\", 13);\n    }\n    if (rf & 2) {\n        const ctx_r1 = core[\"Oc\" /* ɵɵnextContext */]();\n        core[\"Vc\" /* ɵɵproperty */](\"src\", ctx_r1.src)(\"iframeWidth\", ctx_r1.scormWidth)(\"iframeHeight\", ctx_r1.scormHeight)(\"showFullscreenOnToolbar\", true)(\"autoFullscreenOnRotate\", true);\n    }\n}\nfunction AddonModScormPlayerPage_p_13_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Ec\" /* ɵɵelementStart */](0, \"p\");\n        core[\"pd\" /* ɵɵtext */](1);\n        core[\"Pc\" /* ɵɵpipe */](2, \"translate\");\n        core[\"Dc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r2 = core[\"Oc\" /* ɵɵnextContext */]();\n        core[\"lc\" /* ɵɵadvance */](1);\n        core[\"qd\" /* ɵɵtextInterpolate */](core[\"Qc\" /* ɵɵpipeBind1 */](2, 1, ctx_r2.errorMessage));\n    }\n}\nfunction AddonModScormPlayerPage_core_navigation_bar_14_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r8 = core[\"Fc\" /* ɵɵgetCurrentView */]();\n        core[\"Ec\" /* ɵɵelementStart */](0, \"core-navigation-bar\", 14);\n        core[\"Mc\" /* ɵɵlistener */](\"action\", function AddonModScormPlayerPage_core_navigation_bar_14_Template_core_navigation_bar_action_0_listener($event) { core[\"fd\" /* ɵɵrestoreView */](_r8); const ctx_r7 = core[\"Oc\" /* ɵɵnextContext */](); return ctx_r7.loadSco($event); });\n        core[\"Dc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r3 = core[\"Oc\" /* ɵɵnextContext */]();\n        core[\"Vc\" /* ɵɵproperty */](\"items\", ctx_r3.navigationItems);\n    }\n}\n/**\n * Page that allows playing a SCORM.\n */\nlet player_AddonModScormPlayerPage = /*@__PURE__*/ (() => {\n    class AddonModScormPlayerPage {\n        constructor(mainMenuPage) {\n            this.mainMenuPage = mainMenuPage;\n            this.showToc = false; // Whether to show the table of contents (TOC).\n            this.loadingToc = true; // Whether the TOC is being loaded.\n            this.toc = []; // List of SCOs.\n            this.loaded = false; // Whether the data has been loaded.\n            this.incomplete = false; // Whether last attempt is incomplete.\n            this.navigationItems = [];\n            this.newAttempt = false; // Whether to start a new attempt.\n            this.attempt = 0; // The attempt number.\n            this.offline = false; // Whether it's offline mode.\n        }\n        /**\n         * @inheritdoc\n         */\n        ngOnInit() {\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                try {\n                    this.cmId = services_navigator[\"a\" /* CoreNavigator */].getRequiredRouteNumberParam('cmId');\n                    this.courseId = services_navigator[\"a\" /* CoreNavigator */].getRequiredRouteNumberParam('courseId');\n                    this.mode = services_navigator[\"a\" /* CoreNavigator */].getRouteParam('mode') || services_scorm[\"b\" /* AddonModScormProvider */].MODENORMAL;\n                    this.moduleUrl = services_navigator[\"a\" /* CoreNavigator */].getRouteParam('moduleUrl') || '';\n                    this.newAttempt = !!services_navigator[\"a\" /* CoreNavigator */].getRouteBooleanParam('newAttempt');\n                    this.organizationId = services_navigator[\"a\" /* CoreNavigator */].getRouteParam('organizationId');\n                    this.initialScoId = services_navigator[\"a\" /* CoreNavigator */].getRouteNumberParam('scoId');\n                    this.siteId = sites[\"b\" /* CoreSites */].getRequiredCurrentSite().getId();\n                }\n                catch (error) {\n                    dom[\"a\" /* CoreDomUtils */].showErrorModal(error);\n                    services_navigator[\"a\" /* CoreNavigator */].back();\n                    return;\n                }\n                try {\n                    // Fetch the SCORM data.\n                    yield this.fetchData();\n                    if (!this.currentSco) {\n                        services_navigator[\"a\" /* CoreNavigator */].back();\n                        return;\n                    }\n                    // Set start time if it's a new attempt.\n                    if (this.newAttempt) {\n                        try {\n                            yield this.setStartTime(this.currentSco.id);\n                        }\n                        catch (error) {\n                            dom[\"a\" /* CoreDomUtils */].showErrorModalDefault(error, 'addon.mod_scorm.errorgetscorm', true);\n                        }\n                    }\n                    // Load SCO.\n                    this.loadSco(this.currentSco);\n                }\n                finally {\n                    this.loaded = true;\n                }\n            });\n        }\n        get canSaveTracks() {\n            return !this.accessInfo || !!this.accessInfo.cansavetrack;\n        }\n        /**\n         * Initialize.\n         *\n         * @return Promise resolved when done.\n         */\n        initialize() {\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                // Get the SCORM instance.\n                this.scorm = yield services_scorm[\"a\" /* AddonModScorm */].getScorm(this.courseId, this.cmId, {\n                    moduleUrl: this.moduleUrl,\n                    readingStrategy: 1 /* PREFER_CACHE */,\n                });\n                // Block the SCORM so it cannot be synchronized.\n                sync[\"a\" /* CoreSync */].blockOperation(services_scorm[\"b\" /* AddonModScormProvider */].COMPONENT, this.scorm.id, 'player');\n                // We use SCORM name at start, later we'll use the SCO title.\n                this.title = this.scorm.name;\n                this.showToc = services_scorm[\"a\" /* AddonModScorm */].displayTocInPlayer(this.scorm);\n                if (this.scorm.popup) {\n                    // If we receive a value > 100 we assume it's a fixed pixel size.\n                    if (this.scorm.width && this.scorm.width > 100) {\n                        this.scormWidth = this.scorm.width;\n                        // Only get fixed size on height if width is also fixed.\n                        if (this.scorm.height && this.scorm.height > 100) {\n                            this.scormHeight = this.scorm.height;\n                        }\n                    }\n                }\n                // Listen for events to update the TOC, navigate through SCOs and go offline.\n                this.tocObserver = events[\"b\" /* CoreEvents */].on(services_scorm[\"b\" /* AddonModScormProvider */].UPDATE_TOC_EVENT, (data) => {\n                    if (data.scormId !== this.scorm.id) {\n                        return;\n                    }\n                    if (this.offline) {\n                        // Wait a bit to make sure data is stored.\n                        setTimeout(this.refreshToc.bind(this), 100);\n                    }\n                    else {\n                        this.refreshToc();\n                    }\n                }, this.siteId);\n                this.launchNextObserver = events[\"b\" /* CoreEvents */].on(services_scorm[\"b\" /* AddonModScormProvider */].LAUNCH_NEXT_SCO_EVENT, (data) => {\n                    if (data.scormId === this.scorm.id && this.currentSco) {\n                        const nextSco = scorm_helper[\"a\" /* AddonModScormHelper */].getNextScoFromToc(this.toc, this.currentSco.id);\n                        if (nextSco) {\n                            this.loadSco(nextSco);\n                        }\n                    }\n                }, this.siteId);\n                this.launchPrevObserver = events[\"b\" /* CoreEvents */].on(services_scorm[\"b\" /* AddonModScormProvider */].LAUNCH_PREV_SCO_EVENT, (data) => {\n                    if (data.scormId === this.scorm.id && this.currentSco) {\n                        const previousSco = scorm_helper[\"a\" /* AddonModScormHelper */].getPreviousScoFromToc(this.toc, this.currentSco.id);\n                        if (previousSco) {\n                            this.loadSco(previousSco);\n                        }\n                    }\n                }, this.siteId);\n                this.goOfflineObserver = events[\"b\" /* CoreEvents */].on(services_scorm[\"b\" /* AddonModScormProvider */].GO_OFFLINE_EVENT, (data) => {\n                    if (data.scormId !== this.scorm.id || this.offline) {\n                        return;\n                    }\n                    this.offline = true;\n                    // Wait a bit to prevent collisions between this store and SCORM API's store.\n                    setTimeout(() => Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                        try {\n                            scorm_helper[\"a\" /* AddonModScormHelper */].convertAttemptToOffline(this.scorm, this.attempt);\n                        }\n                        catch (error) {\n                            dom[\"a\" /* CoreDomUtils */].showErrorModalDefault(error, 'core.error', true);\n                        }\n                        this.refreshToc();\n                    }), 200);\n                }, this.siteId);\n            });\n        }\n        /**\n         * Calculate the next and previous SCO.\n         *\n         * @param scoId Current SCO ID.\n         */\n        calculateNavigationItems(scoId) {\n            this.navigationItems = this.toc\n                .filter((item) => item.isvisible)\n                .map((item) => ({\n                item: item,\n                title: item.title,\n                current: item.id == scoId,\n                enabled: !!(item.prereq && item.launch),\n            }));\n        }\n        /**\n         * Determine the attempt to use, the mode (normal/preview) and if it's offline or online.\n         *\n         * @param attemptsData Attempts count.\n         * @param accessInfo Access info.\n         * @return Promise resolved when done.\n         */\n        determineAttemptAndMode(attemptsData, accessInfo) {\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                const data = yield scorm_helper[\"a\" /* AddonModScormHelper */].determineAttemptToContinue(this.scorm, attemptsData);\n                let incomplete = false;\n                this.attempt = data.num;\n                this.offline = data.offline;\n                if (this.attempt != attemptsData.lastAttempt.num) {\n                    this.attemptToContinue = this.attempt;\n                }\n                // Check if current attempt is incomplete.\n                if (this.attempt > 0) {\n                    incomplete = yield services_scorm[\"a\" /* AddonModScorm */].isAttemptIncomplete(this.scorm.id, this.attempt, {\n                        offline: this.offline,\n                        cmId: this.cmId,\n                    });\n                }\n                // Determine mode and attempt to use.\n                const result = services_scorm[\"a\" /* AddonModScorm */].determineAttemptAndMode(this.scorm, this.mode, this.attempt, this.newAttempt, incomplete, accessInfo.cansavetrack);\n                if (result.attempt > this.attempt) {\n                    // We're creating a new attempt.\n                    if (this.offline) {\n                        // Last attempt was offline, so we'll create a new offline attempt.\n                        yield scorm_helper[\"a\" /* AddonModScormHelper */].createOfflineAttempt(this.scorm, result.attempt, attemptsData.online.length);\n                    }\n                    else {\n                        try {\n                            // Last attempt was online, verify that we can create a new online attempt. We ignore cache.\n                            yield services_scorm[\"a\" /* AddonModScorm */].getScormUserData(this.scorm.id, result.attempt, {\n                                cmId: this.cmId,\n                                readingStrategy: 2 /* ONLY_NETWORK */,\n                            });\n                        }\n                        catch (_a) {\n                            // Cannot communicate with the server, create an offline attempt.\n                            this.offline = true;\n                            yield scorm_helper[\"a\" /* AddonModScormHelper */].createOfflineAttempt(this.scorm, result.attempt, attemptsData.online.length);\n                        }\n                    }\n                }\n                this.mode = result.mode;\n                this.newAttempt = result.newAttempt;\n                this.attempt = result.attempt;\n            });\n        }\n        /**\n         * Fetch data needed to play the SCORM.\n         *\n         * @return Promise resolved when done.\n         */\n        fetchData() {\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                if (!this.scorm) {\n                    yield this.initialize();\n                }\n                // Wait for any ongoing sync to finish. We won't sync a SCORM while it's being played.\n                yield scorm_sync[\"a\" /* AddonModScormSync */].waitForSync(this.scorm.id);\n                try {\n                    // Get attempts data.\n                    const [attemptsData, accessInfo] = yield Promise.all([\n                        services_scorm[\"a\" /* AddonModScorm */].getAttemptCount(this.scorm.id, { cmId: this.cmId }),\n                        services_scorm[\"a\" /* AddonModScorm */].getAccessInformation(this.scorm.id, {\n                            cmId: this.cmId,\n                        }),\n                    ]);\n                    this.accessInfo = accessInfo;\n                    yield this.determineAttemptAndMode(attemptsData, accessInfo);\n                    const [data] = yield Promise.all([\n                        services_scorm[\"a\" /* AddonModScorm */].getScormUserData(this.scorm.id, this.attempt, {\n                            cmId: this.cmId,\n                            offline: this.offline,\n                        }),\n                        this.fetchToc(),\n                    ]);\n                    this.userData = data;\n                }\n                catch (error) {\n                    dom[\"a\" /* CoreDomUtils */].showErrorModalDefault(error, 'addon.mod_scorm.errorgetscorm', true);\n                }\n            });\n        }\n        /**\n         * Fetch the TOC.\n         *\n         * @return Promise resolved when done.\n         */\n        fetchToc() {\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                this.loadingToc = true;\n                try {\n                    // We need to check incomplete again: attempt number or status might have changed.\n                    this.incomplete = yield services_scorm[\"a\" /* AddonModScorm */].isAttemptIncomplete(this.scorm.id, this.attempt, {\n                        offline: this.offline,\n                        cmId: this.cmId,\n                    });\n                    // Get TOC.\n                    this.toc = yield scorm_helper[\"a\" /* AddonModScormHelper */].getToc(this.scorm.id, this.attempt, this.incomplete, {\n                        organization: this.organizationId,\n                        offline: this.offline,\n                        cmId: this.cmId,\n                    });\n                    if (this.currentSco) {\n                        return;\n                    }\n                    if (this.newAttempt) {\n                        // Creating a new attempt, use the first SCO defined by the SCORM.\n                        this.initialScoId = this.scorm.launch;\n                    }\n                    // Determine current SCO if we received an ID.\n                    if (this.initialScoId && this.initialScoId > 0) {\n                        // SCO set by parameter, get it from TOC.\n                        this.currentSco = scorm_helper[\"a\" /* AddonModScormHelper */].getScoFromToc(this.toc, this.initialScoId);\n                    }\n                    if (this.currentSco) {\n                        return;\n                    }\n                    // No SCO defined. Get the first valid one.\n                    const sco = yield scorm_helper[\"a\" /* AddonModScormHelper */].getFirstSco(this.scorm.id, this.attempt, {\n                        toc: this.toc,\n                        organization: this.organizationId,\n                        mode: this.mode,\n                        offline: this.offline,\n                        cmId: this.cmId,\n                    });\n                    if (sco) {\n                        this.currentSco = sco;\n                    }\n                    else {\n                        // We couldn't find a SCO to load: they're all inactive or without launch URL.\n                        this.errorMessage = 'addon.mod_scorm.errornovalidsco';\n                    }\n                }\n                finally {\n                    this.loadingToc = false;\n                }\n            });\n        }\n        /**\n         * Load a SCO.\n         *\n         * @param sco The SCO to load.\n         * @return Promise resolved when done.\n         */\n        loadSco(sco) {\n            var _a;\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                if (!this.dataModel) {\n                    // Create the model.\n                    this.dataModel = new data_model_12_AddonModScormDataModel12(this.siteId, this.scorm, sco.id, this.attempt, (_a = this.userData) !== null && _a !== void 0 ? _a : {}, this.mode, this.offline, this.canSaveTracks);\n                    // Add the model to the window so the SCORM can access it.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    window.API = this.dataModel;\n                }\n                else {\n                    // Load the SCO in the existing model.\n                    this.dataModel.loadSco(sco.id);\n                }\n                this.currentSco = sco;\n                this.title = sco.title || this.scorm.name; // Try to use SCO title.\n                this.calculateNavigationItems(sco.id);\n                // Load the SCO source.\n                this.loadScoSrc(sco);\n                if (sco.scormtype == 'asset') {\n                    // Mark the asset as completed.\n                    this.markCompleted(sco);\n                }\n                // Trigger SCO launch event.\n                utils[\"a\" /* CoreUtils */].ignoreErrors(services_scorm[\"a\" /* AddonModScorm */].logLaunchSco(this.scorm.id, sco.id, this.scorm.name));\n            });\n        }\n        /**\n         * Load SCO src.\n         *\n         * @param sco SCO to load.\n         * @return Promise resolved when done.\n         */\n        loadScoSrc(sco) {\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                const src = yield services_scorm[\"a\" /* AddonModScorm */].getScoSrc(this.scorm, sco);\n                if (src == this.src) {\n                    // Re-loading same page. Set it to empty and then re-set the src in the next digest so it detects it has changed.\n                    this.src = '';\n                    yield utils[\"a\" /* CoreUtils */].nextTick();\n                }\n                this.src = src;\n            });\n        }\n        /**\n         * Given an SCO, mark it as completed.\n         *\n         * @param sco SCO to mark.\n         * @return Promise resolved when done.\n         */\n        markCompleted(sco) {\n            var _a;\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                if (!this.canSaveTracks) {\n                    return;\n                }\n                const tracks = [{\n                        element: 'cmi.core.lesson_status',\n                        value: 'completed',\n                    }];\n                try {\n                    services_scorm[\"a\" /* AddonModScorm */].saveTracks(sco.id, this.attempt, tracks, this.scorm, this.offline);\n                }\n                catch (_b) {\n                    // Error saving data. Go offline if needed.\n                    if (this.offline) {\n                        return;\n                    }\n                    const data = yield services_scorm[\"a\" /* AddonModScorm */].getScormUserData(this.scorm.id, this.attempt, {\n                        cmId: this.cmId,\n                    });\n                    if (data[sco.id] && data[sco.id].userdata['cmi.core.lesson_status'] == 'completed') {\n                        // Already marked as completed.\n                        return;\n                    }\n                    try {\n                        // Go offline.\n                        yield scorm_helper[\"a\" /* AddonModScormHelper */].convertAttemptToOffline(this.scorm, this.attempt);\n                        this.offline = true;\n                        (_a = this.dataModel) === null || _a === void 0 ? void 0 : _a.setOffline(true);\n                        yield services_scorm[\"a\" /* AddonModScorm */].saveTracks(sco.id, this.attempt, tracks, this.scorm, true);\n                    }\n                    catch (error) {\n                        dom[\"a\" /* CoreDomUtils */].showErrorModalDefault(error, 'core.error', true);\n                    }\n                }\n                finally {\n                    // Refresh TOC, some prerequisites might have changed.\n                    this.refreshToc();\n                }\n            });\n        }\n        /**\n         * Show the TOC.\n         */\n        openToc() {\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                const modalData = yield dom[\"a\" /* CoreDomUtils */].openSideModal({\n                    component: toc[\"a\" /* AddonModScormTocComponent */],\n                    componentProps: {\n                        toc: this.toc,\n                        attemptToContinue: this.attemptToContinue,\n                        selected: this.currentSco && this.currentSco.id,\n                        moduleId: this.cmId,\n                        courseId: this.courseId,\n                        accessInfo: this.accessInfo,\n                        mode: this.mode,\n                    },\n                });\n                if (modalData) {\n                    this.loadSco(modalData);\n                }\n            });\n        }\n        /**\n         * Refresh the TOC.\n         *\n         * @return Promise resolved when done.\n         */\n        refreshToc() {\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                try {\n                    yield utils[\"a\" /* CoreUtils */].ignoreErrors(services_scorm[\"a\" /* AddonModScorm */].invalidateAllScormData(this.scorm.id));\n                    yield this.fetchToc();\n                }\n                catch (error) {\n                    dom[\"a\" /* CoreDomUtils */].showErrorModalDefault(error, 'addon.mod_scorm.errorgetscorm', true);\n                }\n            });\n        }\n        /**\n         * Set SCORM start time.\n         *\n         * @param scoId SCO ID.\n         * @return Promise resolved when done.\n         */\n        setStartTime(scoId) {\n            return Object(tslib_es6[\"a\" /* __awaiter */])(this, void 0, void 0, function* () {\n                if (!this.canSaveTracks) {\n                    return;\n                }\n                const tracks = [{\n                        element: 'x.start.time',\n                        value: String(time[\"a\" /* CoreTimeUtils */].timestamp()),\n                    }];\n                yield services_scorm[\"a\" /* AddonModScorm */].saveTracks(scoId, this.attempt, tracks, this.scorm, this.offline);\n                if (this.offline) {\n                    return;\n                }\n                // New online attempt created, update cached data about online attempts.\n                yield utils[\"a\" /* CoreUtils */].ignoreErrors(services_scorm[\"a\" /* AddonModScorm */].getAttemptCount(this.scorm.id, {\n                    cmId: this.cmId,\n                    readingStrategy: 2 /* ONLY_NETWORK */,\n                }));\n            });\n        }\n        /**\n         * @inheritdoc\n         */\n        ngOnDestroy() {\n            var _a, _b, _c;\n            // Empty src when leaving the state so unload event is triggered in the iframe.\n            this.src = '';\n            events[\"b\" /* CoreEvents */].trigger(events[\"b\" /* CoreEvents */].ACTIVITY_DATA_SENT, { module: 'scorm' });\n            // Stop listening for events.\n            (_a = this.tocObserver) === null || _a === void 0 ? void 0 : _a.off();\n            (_b = this.launchNextObserver) === null || _b === void 0 ? void 0 : _b.off();\n            (_c = this.launchPrevObserver) === null || _c === void 0 ? void 0 : _c.off();\n            setTimeout(() => {\n                var _a;\n                (_a = this.goOfflineObserver) === null || _a === void 0 ? void 0 : _a.off();\n            }, 500);\n            // Unblock the SCORM so it can be synced.\n            sync[\"a\" /* CoreSync */].unblockOperation(services_scorm[\"b\" /* AddonModScormProvider */].COMPONENT, this.scorm.id, 'player');\n        }\n    }\n    AddonModScormPlayerPage.ɵfac = function AddonModScormPlayerPage_Factory(t) { return new (t || AddonModScormPlayerPage)(core[\"yc\" /* ɵɵdirectiveInject */](menu[\"a\" /* CoreMainMenuPage */])); };\n    AddonModScormPlayerPage.ɵcmp = core[\"sc\" /* ɵɵdefineComponent */]({ type: AddonModScormPlayerPage, selectors: [[\"page-addon-mod-scorm-player\"]], decls: 15, vars: 11, consts: [[\"slot\", \"start\"], [3, \"text\"], [\"contextLevel\", \"module\", 3, \"text\", \"contextInstanceId\", \"courseId\"], [\"slot\", \"end\"], [3, \"loading\", 4, \"ngIf\"], [3, \"hideUntil\"], [3, \"src\", \"iframeWidth\", \"iframeHeight\", \"showFullscreenOnToolbar\", \"autoFullscreenOnRotate\", 4, \"ngIf\"], [4, \"ngIf\"], [\"collapsible-footer\", \"\", \"appearOnBottom\", \"\", \"slot\", \"fixed\", 3, \"items\", \"action\", 4, \"ngIf\"], [3, \"loading\"], [\"fill\", \"clear\", \"aria-haspopup\", \"true\", 3, \"click\", 4, \"ngIf\"], [\"fill\", \"clear\", \"aria-haspopup\", \"true\", 3, \"click\"], [\"name\", \"fas-bookmark\", \"slot\", \"icon-only\", \"aria-hidden\", \"true\"], [3, \"src\", \"iframeWidth\", \"iframeHeight\", \"showFullscreenOnToolbar\", \"autoFullscreenOnRotate\"], [\"collapsible-footer\", \"\", \"appearOnBottom\", \"\", \"slot\", \"fixed\", 3, \"items\", \"action\"]], template: function AddonModScormPlayerPage_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"Ec\" /* ɵɵelementStart */](0, \"ion-header\");\n                core[\"Ec\" /* ɵɵelementStart */](1, \"ion-toolbar\");\n                core[\"Ec\" /* ɵɵelementStart */](2, \"ion-buttons\", 0);\n                core[\"zc\" /* ɵɵelement */](3, \"ion-back-button\", 1);\n                core[\"Pc\" /* ɵɵpipe */](4, \"translate\");\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Ec\" /* ɵɵelementStart */](5, \"ion-title\");\n                core[\"Ec\" /* ɵɵelementStart */](6, \"h1\");\n                core[\"zc\" /* ɵɵelement */](7, \"core-format-text\", 2);\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Ec\" /* ɵɵelementStart */](8, \"ion-buttons\", 3);\n                core[\"nd\" /* ɵɵtemplate */](9, AddonModScormPlayerPage_core_button_with_spinner_9_Template, 2, 2, \"core-button-with-spinner\", 4);\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"Ec\" /* ɵɵelementStart */](10, \"ion-content\");\n                core[\"Ec\" /* ɵɵelementStart */](11, \"core-loading\", 5);\n                core[\"nd\" /* ɵɵtemplate */](12, AddonModScormPlayerPage_core_iframe_12_Template, 1, 5, \"core-iframe\", 6);\n                core[\"nd\" /* ɵɵtemplate */](13, AddonModScormPlayerPage_p_13_Template, 3, 3, \"p\", 7);\n                core[\"Dc\" /* ɵɵelementEnd */]();\n                core[\"nd\" /* ɵɵtemplate */](14, AddonModScormPlayerPage_core_navigation_bar_14_Template, 1, 1, \"core-navigation-bar\", 8);\n                core[\"Dc\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"lc\" /* ɵɵadvance */](3);\n                core[\"Vc\" /* ɵɵproperty */](\"text\", core[\"Qc\" /* ɵɵpipeBind1 */](4, 9, \"core.back\"));\n                core[\"lc\" /* ɵɵadvance */](4);\n                core[\"Vc\" /* ɵɵproperty */](\"text\", ctx.title)(\"contextInstanceId\", ctx.cmId)(\"courseId\", ctx.courseId);\n                core[\"lc\" /* ɵɵadvance */](2);\n                core[\"Vc\" /* ɵɵproperty */](\"ngIf\", ctx.showToc);\n                core[\"lc\" /* ɵɵadvance */](2);\n                core[\"Vc\" /* ɵɵproperty */](\"hideUntil\", ctx.loaded);\n                core[\"lc\" /* ɵɵadvance */](1);\n                core[\"Vc\" /* ɵɵproperty */](\"ngIf\", ctx.loaded && ctx.src);\n                core[\"lc\" /* ɵɵadvance */](1);\n                core[\"Vc\" /* ɵɵproperty */](\"ngIf\", !ctx.src && ctx.errorMessage);\n                core[\"lc\" /* ɵɵadvance */](1);\n                core[\"Vc\" /* ɵɵproperty */](\"ngIf\", ctx.loaded && ctx.navigationItems.length > 1);\n            }\n        }, directives: [ionic_angular[\"C\" /* IonHeader */], ionic_angular[\"Ab\" /* IonToolbar */], ionic_angular[\"m\" /* IonButtons */], ionic_angular[\"h\" /* IonBackButton */], ionic_angular[\"i\" /* IonBackButtonDelegate */], ionic_angular[\"yb\" /* IonTitle */], format_text[\"a\" /* CoreFormatTextDirective */], common[\"t\" /* NgIf */], content[\"a\" /* CoreContentDirective */], ionic_angular[\"v\" /* IonContent */], loading[\"a\" /* CoreLoadingComponent */], button_with_spinner[\"a\" /* CoreButtonWithSpinnerComponent */], update_non_reactive_attributes[\"a\" /* CoreUpdateNonReactiveAttributesDirective */], ionic_angular[\"l\" /* IonButton */], ionic_angular[\"D\" /* IonIcon */], fa_icon[\"a\" /* CoreFaIconDirective */], iframe[\"a\" /* CoreIframeComponent */], navigation_bar[\"a\" /* CoreNavigationBarComponent */], collapsible_footer[\"a\" /* CoreCollapsibleFooterDirective */]], pipes: [ngx_translate_core[\"d\" /* TranslatePipe */]], encapsulation: 2 });\n    return AddonModScormPlayerPage;\n})();\n\n// CONCATENATED MODULE: ./src/addons/mod/scorm/scorm-lazy.module.ts\n// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n\n\nconst routes = [\n    {\n        path: ':courseId/:cmId',\n        component: index_AddonModScormIndexPage,\n    },\n    {\n        path: ':courseId/:cmId/player',\n        component: player_AddonModScormPlayerPage,\n    },\n];\nlet scorm_lazy_module_AddonModScormLazyModule = /*@__PURE__*/ (() => {\n    class AddonModScormLazyModule {\n    }\n    AddonModScormLazyModule.ɵmod = core[\"wc\" /* ɵɵdefineNgModule */]({ type: AddonModScormLazyModule });\n    AddonModScormLazyModule.ɵinj = core[\"vc\" /* ɵɵdefineInjector */]({ factory: function AddonModScormLazyModule_Factory(t) { return new (t || AddonModScormLazyModule)(); }, imports: [[\n                router[\"m\" /* RouterModule */].forChild(routes),\n                shared_module[\"a\" /* CoreSharedModule */],\n                components_module[\"a\" /* AddonModScormComponentsModule */],\n            ]] });\n    return AddonModScormLazyModule;\n})();\n(function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"kd\" /* ɵɵsetNgModuleScope */](scorm_lazy_module_AddonModScormLazyModule, { declarations: [index_AddonModScormIndexPage,\n            player_AddonModScormPlayerPage], imports: [router[\"m\" /* RouterModule */], shared_module[\"a\" /* CoreSharedModule */],\n            components_module[\"a\" /* AddonModScormComponentsModule */]] });\n})();\n\n\n/***/ })\n\n}]);","inputSourceMap":null}